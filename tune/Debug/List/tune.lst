
AVRASM ver. 2.1.30  C:\Users\Bardia\Desktop\sharivar20\Debug\List\tune.asm Thu Sep 11 10:19:23 2025

C:\Users\Bardia\Desktop\sharivar20\Debug\List\tune.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Bardia\Desktop\sharivar20\Debug\List\tune.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Bardia\Desktop\sharivar20\Debug\List\tune.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 00d8 	JMP  _timer2_comp_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 2020
00002b 2020
00002c 2020
00002d 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00002e 2020
00002f 2020
000030 2020
000031 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000032 4b00
000033 7965
000034 203a
C:\Users\Bardia\Desktop\sharivar20\Debug\List\tune.asm(1124): warning: .cseg .db misalignment - padding zero byte
000035 0000      	.DB  0x0,0x4B,0x65,0x79,0x3A,0x20,0x0
                 _0x2000003:
000036 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000037 0002      	.DW  0x02
000038 0260      	.DW  __base_y_G100
000039 006c      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 00de 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h> // Make sure to include the LCD library
                 ;
                 ;// Function to get the pressed key from the 4x4 keypad
                 ;char get_keypad_key()
                 ; 0000 0007 {
                 
                 	.CSEG
                 _get_keypad_key:
                 ; .FSTART _get_keypad_key
                 ; 0000 0008     unsigned char row, col;
                 ; 0000 0009     // The keypad is connected to PORTC. We will scan it.
                 ; 0000 000A     for(row = 0; row < 4; row++)
000068 931a      	ST   -Y,R17
000069 930a      	ST   -Y,R16
                 ;	row -> R17
                 ;	col -> R16
00006a e010      	LDI  R17,LOW(0)
                 _0x4:
00006b 3014      	CPI  R17,4
00006c f008      	BRLO PC+2
00006d c066      	RJMP _0x5
                 ; 0000 000B     {
                 ; 0000 000C         // Set all PORTC pins to input with pull-ups initially
                 ; 0000 000D         DDRC = 0x00;
00006e e0e0      	LDI  R30,LOW(0)
00006f bbe4      	OUT  0x14,R30
                 ; 0000 000E         PORTC = 0xFF;
000070 efef      	LDI  R30,LOW(255)
000071 bbe5      	OUT  0x15,R30
                 ; 0000 000F 
                 ; 0000 0010         // Set the current row pin to output low
                 ; 0000 0011         // Rows are PC0, PC1, PC2, PC3
                 ; 0000 0012         DDRC |= (1 << row);
000072 b214      	IN   R1,20
000073 2fe1      	MOV  R30,R17
000074 e0a1      	LDI  R26,LOW(1)
000075 940e 01fb 	CALL __LSLB12
000077 29e1      	OR   R30,R1
000078 bbe4      	OUT  0x14,R30
                 ; 0000 0013         PORTC &= ~(1 << row);
000079 b215      	IN   R1,21
00007a 2fe1      	MOV  R30,R17
00007b 940e 01fb 	CALL __LSLB12
00007d 95e0      	COM  R30
00007e 21e1      	AND  R30,R1
00007f bbe5      	OUT  0x15,R30
                 ; 0000 0014 
                 ; 0000 0015         delay_us(100); // Small delay for signal to settle
                +
000080 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000081 958a     +DEC R24
000082 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
                 ; 0000 0016 
                 ; 0000 0017         // Read the columns (PC4 to PC7)
                 ; 0000 0018         col = (PINC & 0xF0);
000083 b3e3      	IN   R30,0x13
000084 7fe0      	ANDI R30,LOW(0xF0)
000085 2f0e      	MOV  R16,R30
                 ; 0000 0019 
                 ; 0000 001A         if (col != 0xF0) // A column has been pulled low
000086 3f00      	CPI  R16,240
000087 f409      	BRNE PC+2
000088 c049      	RJMP _0x6
                 ; 0000 001B         {
                 ; 0000 001C             // A key is pressed, debounce and confirm
                 ; 0000 001D             delay_ms(20);
000089 e1a4      	LDI  R26,LOW(20)
00008a e0b0      	LDI  R27,0
00008b 940e 01f1 	CALL _delay_ms
                 ; 0000 001E             col = (PINC & 0xF0);
00008d b3e3      	IN   R30,0x13
00008e 7fe0      	ANDI R30,LOW(0xF0)
00008f 2f0e      	MOV  R16,R30
                 ; 0000 001F             if (col != 0xF0)
000090 3f00      	CPI  R16,240
000091 f409      	BRNE PC+2
000092 c03f      	RJMP _0x7
                 ; 0000 0020             {
                 ; 0000 0021                  // Wait for key release. The row is still being driven low,
                 ; 0000 0022                  // so this will now correctly wait until the button is let go.
                 ; 0000 0023                  while((PINC & 0xF0) != 0xF0);
                 _0x8:
000093 b3e3      	IN   R30,0x13
000094 7fe0      	ANDI R30,LOW(0xF0)
000095 3fe0      	CPI  R30,LOW(0xF0)
000096 f7e1      	BRNE _0x8
                 ; 0000 0024 
                 ; 0000 0025                  switch(row)
000097 2fe1      	MOV  R30,R17
000098 e0f0      	LDI  R31,0
                 ; 0000 0026                  {
                 ; 0000 0027                      case 0: // Top row (Schematic Row 'A')
000099 9730      	SBIW R30,0
00009a f469      	BRNE _0xE
                 ; 0000 0028                          if (col == 0xE0) return '7'; // 0b11100000
00009b 3e00      	CPI  R16,224
00009c f411      	BRNE _0xF
00009d e3e7      	LDI  R30,LOW(55)
00009e c036      	RJMP _0x2020002
                 ; 0000 0029                          if (col == 0xD0) return '8'; // 0b11010000
                 _0xF:
00009f 3d00      	CPI  R16,208
0000a0 f411      	BRNE _0x10
0000a1 e3e8      	LDI  R30,LOW(56)
0000a2 c032      	RJMP _0x2020002
                 ; 0000 002A                          if (col == 0xB0) return '9'; // 0b10110000
                 _0x10:
0000a3 3b00      	CPI  R16,176
0000a4 f411      	BRNE _0x11
0000a5 e3e9      	LDI  R30,LOW(57)
0000a6 c02e      	RJMP _0x2020002
                 ; 0000 002B                          break;
                 _0x11:
0000a7 c02a      	RJMP _0xD
                 ; 0000 002C                      case 1: // Second row (Schematic Row 'B')
                 _0xE:
0000a8 30e1      	CPI  R30,LOW(0x1)
0000a9 e0a0      	LDI  R26,HIGH(0x1)
0000aa 07fa      	CPC  R31,R26
0000ab f469      	BRNE _0x12
                 ; 0000 002D                          if (col == 0xE0) return '4';
0000ac 3e00      	CPI  R16,224
0000ad f411      	BRNE _0x13
0000ae e3e4      	LDI  R30,LOW(52)
0000af c025      	RJMP _0x2020002
                 ; 0000 002E                          if (col == 0xD0) return '5';
                 _0x13:
0000b0 3d00      	CPI  R16,208
0000b1 f411      	BRNE _0x14
0000b2 e3e5      	LDI  R30,LOW(53)
0000b3 c021      	RJMP _0x2020002
                 ; 0000 002F                          if (col == 0xB0) return '6';
                 _0x14:
0000b4 3b00      	CPI  R16,176
0000b5 f411      	BRNE _0x15
0000b6 e3e6      	LDI  R30,LOW(54)
0000b7 c01d      	RJMP _0x2020002
                 ; 0000 0030                          break;
                 _0x15:
0000b8 c019      	RJMP _0xD
                 ; 0000 0031                      case 2: // Third row (Schematic Row 'C')
                 _0x12:
0000b9 30e2      	CPI  R30,LOW(0x2)
0000ba e0a0      	LDI  R26,HIGH(0x2)
0000bb 07fa      	CPC  R31,R26
0000bc f469      	BRNE _0x16
                 ; 0000 0032                          if (col == 0xE0) return '1';
0000bd 3e00      	CPI  R16,224
0000be f411      	BRNE _0x17
0000bf e3e1      	LDI  R30,LOW(49)
0000c0 c014      	RJMP _0x2020002
                 ; 0000 0033                          if (col == 0xD0) return '2';
                 _0x17:
0000c1 3d00      	CPI  R16,208
0000c2 f411      	BRNE _0x18
0000c3 e3e2      	LDI  R30,LOW(50)
0000c4 c010      	RJMP _0x2020002
                 ; 0000 0034                          if (col == 0xB0) return '3';
                 _0x18:
0000c5 3b00      	CPI  R16,176
0000c6 f411      	BRNE _0x19
0000c7 e3e3      	LDI  R30,LOW(51)
0000c8 c00c      	RJMP _0x2020002
                 ; 0000 0035                          break;
                 _0x19:
0000c9 c008      	RJMP _0xD
                 ; 0000 0036                      case 3: // Bottom row (Schematic Row 'D')
                 _0x16:
0000ca 30e3      	CPI  R30,LOW(0x3)
0000cb e0a0      	LDI  R26,HIGH(0x3)
0000cc 07fa      	CPC  R31,R26
0000cd f421      	BRNE _0xD
                 ; 0000 0037                          if (col == 0xD0) return '0';
0000ce 3d00      	CPI  R16,208
0000cf f411      	BRNE _0x1B
0000d0 e3e0      	LDI  R30,LOW(48)
0000d1 c003      	RJMP _0x2020002
                 ; 0000 0038                          break;
                 _0x1B:
                 ; 0000 0039                  }
                 _0xD:
                 ; 0000 003A             }
                 ; 0000 003B         }
                 _0x7:
                 ; 0000 003C     }
                 _0x6:
0000d2 5f1f      	SUBI R17,-1
0000d3 cf97      	RJMP _0x4
                 _0x5:
                 ; 0000 003D     return 0; // No valid key pressed
0000d4 e0e0      	LDI  R30,LOW(0)
                 _0x2020002:
0000d5 9109      	LD   R16,Y+
0000d6 9119      	LD   R17,Y+
0000d7 9508      	RET
                 ; 0000 003E }
                 ; .FEND
                 ;
                 ;// Timer2 Compare Match Interrupt Service Routine
                 ;// This ISR is called every time TCNT2 matches OCR2
                 ;interrupt [TIM2_COMP] void timer2_comp_isr(void)
                 ; 0000 0043 {
                 _timer2_comp_isr:
                 ; .FSTART _timer2_comp_isr
                 ; 0000 0044     // Toggle the buzzer pin on PB7 to create a square wave
                 ; 0000 0045     PORTB.7 = !PORTB.7;
0000d8 9bc7      	SBIS 0x18,7
0000d9 c002      	RJMP _0x1C
0000da 98c7      	CBI  0x18,7
0000db c001      	RJMP _0x1D
                 _0x1C:
0000dc 9ac7      	SBI  0x18,7
                 _0x1D:
                 ; 0000 0046 }
0000dd 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0049 {
                 _main:
                 ; .FSTART _main
                 ; 0000 004A     char key;
                 ; 0000 004B     unsigned int ocr_value;
                 ; 0000 004C 
                 ; 0000 004D 
                 ; 0000 004E     // Port B initialization
                 ; 0000 004F     // Set PB7 as output for the buzzer.
                 ; 0000 0050     DDRB = (1 << DDB7);
                 ;	key -> R17
                 ;	ocr_value -> R18,R19
0000de e8e0      	LDI  R30,LOW(128)
0000df bbe7      	OUT  0x17,R30
                 ; 0000 0051     PORTB = 0x00; // Buzzer off initially
0000e0 e0e0      	LDI  R30,LOW(0)
0000e1 bbe8      	OUT  0x18,R30
                 ; 0000 0052 
                 ; 0000 0053     // Port C initialization for Keypad
                 ; 0000 0054     DDRC = 0x00;
0000e2 bbe4      	OUT  0x14,R30
                 ; 0000 0055     PORTC = 0xFF; // All pins input with pull-ups
0000e3 efef      	LDI  R30,LOW(255)
0000e4 bbe5      	OUT  0x15,R30
                 ; 0000 0056 
                 ; 0000 0057     // Timer/Counter 2 initialization
                 ; 0000 0058     // Mode: CTC top=OCR2
                 ; 0000 0059     // We use an interrupt to toggle PB7, so OC2 pin is disconnected.
                 ; 0000 005A     ASSR = 0 << AS2;
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 bde2      	OUT  0x22,R30
                 ; 0000 005B     // WGM21=1 for CTC mode, CS22=1 for prescaler of 64
                 ; 0000 005C     TCCR2 = (1 << WGM21) | (1 << CS22);
0000e7 e0ec      	LDI  R30,LOW(12)
0000e8 bde5      	OUT  0x25,R30
                 ; 0000 005D     TCNT2 = 0x00;
0000e9 e0e0      	LDI  R30,LOW(0)
0000ea bde4      	OUT  0x24,R30
                 ; 0000 005E     OCR2 = 0x00;
0000eb bde3      	OUT  0x23,R30
                 ; 0000 005F 
                 ; 0000 0060     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0061     TIMSK = (0 << OCIE2); // Interrupt is disabled initially
0000ec bfe9      	OUT  0x39,R30
                 ; 0000 0062 
                 ; 0000 0063     // Alphanumeric LCD initialization
                 ; 0000 0064     // Connections should be configured in your IDE (Project->Configure)
                 ; 0000 0065     // to match your schematic (PORTA).
                 ; 0000 0066     // Characters/line: 16
                 ; 0000 0067     lcd_init(16);
0000ed e1a0      	LDI  R26,LOW(16)
0000ee d0cd      	RCALL _lcd_init
                 ; 0000 0068     lcd_clear(); // Clear display at startup
0000ef d09a      	RCALL _lcd_clear
                 ; 0000 0069 
                 ; 0000 006A     // Global enable interrupts
                 ; 0000 006B     #asm("sei")
0000f0 9478      	sei
                 ; 0000 006C 
                 ; 0000 006D     while (1)
                 _0x1E:
                 ; 0000 006E     {
                 ; 0000 006F         key = get_keypad_key();
0000f1 df76      	RCALL _get_keypad_key
0000f2 2f1e      	MOV  R17,R30
                 ; 0000 0070 
                 ; 0000 0071         if (key >= '0' && key <= '9')
0000f3 3310      	CPI  R17,48
0000f4 f010      	BRLO _0x22
0000f5 331a      	CPI  R17,58
0000f6 f008      	BRLO _0x23
                 _0x22:
0000f7 c063      	RJMP _0x21
                 _0x23:
                 ; 0000 0072         {
                 ; 0000 0073             // A numeric key was pressed
                 ; 0000 0074             lcd_gotoxy(0,1);
0000f8 e0e0      	LDI  R30,LOW(0)
0000f9 93ea      	ST   -Y,R30
0000fa e0a1      	LDI  R26,LOW(1)
0000fb d081      	RCALL _lcd_gotoxy
                 ; 0000 0075             lcd_putsf("                "); // Clear the second line
                +
0000fc e5a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000fd e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000fe d0aa      	RCALL _lcd_putsf
                 ; 0000 0076             lcd_gotoxy(0,1);
0000ff e0e0      	LDI  R30,LOW(0)
000100 93ea      	ST   -Y,R30
000101 e0a1      	LDI  R26,LOW(1)
000102 d07a      	RCALL _lcd_gotoxy
                 ; 0000 0077             lcd_putsf("Key: ");
                +
000103 e6a5     +LDI R26 , LOW ( 2 * _0x0 + ( 17 ) )
000104 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW2FN _0x0,17
000105 d0a3      	RCALL _lcd_putsf
                 ; 0000 0078             lcd_putchar(key);
000106 2fa1      	MOV  R26,R17
000107 d08c      	RCALL _lcd_putchar
                 ; 0000 0079 
                 ; 0000 007A             // OCR values calculated for 1MHz clock and /64 prescaler
                 ; 0000 007B             switch(key) {
000108 2fe1      	MOV  R30,R17
000109 e0f0      	LDI  R31,0
                 ; 0000 007C                 case '0': ocr_value = 30; break; // C4
00010a 33e0      	CPI  R30,LOW(0x30)
00010b e0a0      	LDI  R26,HIGH(0x30)
00010c 07fa      	CPC  R31,R26
00010d f419      	BRNE _0x27
                +
00010e e12e     +LDI R18 , LOW ( 30 )
00010f e030     +LDI R19 , HIGH ( 30 )
                 	__GETWRN 18,19,30
000110 c03e      	RJMP _0x26
                 ; 0000 007D                 case '1': ocr_value = 26; break; // D4
                 _0x27:
000111 33e1      	CPI  R30,LOW(0x31)
000112 e0a0      	LDI  R26,HIGH(0x31)
000113 07fa      	CPC  R31,R26
000114 f419      	BRNE _0x28
                +
000115 e12a     +LDI R18 , LOW ( 26 )
000116 e030     +LDI R19 , HIGH ( 26 )
                 	__GETWRN 18,19,26
000117 c037      	RJMP _0x26
                 ; 0000 007E                 case '2': ocr_value = 23; break; // E4
                 _0x28:
000118 33e2      	CPI  R30,LOW(0x32)
000119 e0a0      	LDI  R26,HIGH(0x32)
00011a 07fa      	CPC  R31,R26
00011b f419      	BRNE _0x29
                +
00011c e127     +LDI R18 , LOW ( 23 )
00011d e030     +LDI R19 , HIGH ( 23 )
                 	__GETWRN 18,19,23
00011e c030      	RJMP _0x26
                 ; 0000 007F                 case '3': ocr_value = 22; break; // F4
                 _0x29:
00011f 33e3      	CPI  R30,LOW(0x33)
000120 e0a0      	LDI  R26,HIGH(0x33)
000121 07fa      	CPC  R31,R26
000122 f419      	BRNE _0x2A
                +
000123 e126     +LDI R18 , LOW ( 22 )
000124 e030     +LDI R19 , HIGH ( 22 )
                 	__GETWRN 18,19,22
000125 c029      	RJMP _0x26
                 ; 0000 0080                 case '4': ocr_value = 19; break; // G4
                 _0x2A:
000126 33e4      	CPI  R30,LOW(0x34)
000127 e0a0      	LDI  R26,HIGH(0x34)
000128 07fa      	CPC  R31,R26
000129 f419      	BRNE _0x2B
                +
00012a e123     +LDI R18 , LOW ( 19 )
00012b e030     +LDI R19 , HIGH ( 19 )
                 	__GETWRN 18,19,19
00012c c022      	RJMP _0x26
                 ; 0000 0081                 case '5': ocr_value = 17; break; // A4
                 _0x2B:
00012d 33e5      	CPI  R30,LOW(0x35)
00012e e0a0      	LDI  R26,HIGH(0x35)
00012f 07fa      	CPC  R31,R26
000130 f419      	BRNE _0x2C
                +
000131 e121     +LDI R18 , LOW ( 17 )
000132 e030     +LDI R19 , HIGH ( 17 )
                 	__GETWRN 18,19,17
000133 c01b      	RJMP _0x26
                 ; 0000 0082                 case '6': ocr_value = 15; break; // B4
                 _0x2C:
000134 33e6      	CPI  R30,LOW(0x36)
000135 e0a0      	LDI  R26,HIGH(0x36)
000136 07fa      	CPC  R31,R26
000137 f419      	BRNE _0x2D
                +
000138 e02f     +LDI R18 , LOW ( 15 )
000139 e030     +LDI R19 , HIGH ( 15 )
                 	__GETWRN 18,19,15
00013a c014      	RJMP _0x26
                 ; 0000 0083                 case '7': ocr_value = 14; break; // C5
                 _0x2D:
00013b 33e7      	CPI  R30,LOW(0x37)
00013c e0a0      	LDI  R26,HIGH(0x37)
00013d 07fa      	CPC  R31,R26
00013e f419      	BRNE _0x2E
                +
00013f e02e     +LDI R18 , LOW ( 14 )
000140 e030     +LDI R19 , HIGH ( 14 )
                 	__GETWRN 18,19,14
000141 c00d      	RJMP _0x26
                 ; 0000 0084                 case '8': ocr_value = 12; break; // D5
                 _0x2E:
000142 33e8      	CPI  R30,LOW(0x38)
000143 e0a0      	LDI  R26,HIGH(0x38)
000144 07fa      	CPC  R31,R26
000145 f419      	BRNE _0x2F
                +
000146 e02c     +LDI R18 , LOW ( 12 )
000147 e030     +LDI R19 , HIGH ( 12 )
                 	__GETWRN 18,19,12
000148 c006      	RJMP _0x26
                 ; 0000 0085                 case '9': ocr_value = 11; break; // E5
                 _0x2F:
000149 33e9      	CPI  R30,LOW(0x39)
00014a e0a0      	LDI  R26,HIGH(0x39)
00014b 07fa      	CPC  R31,R26
00014c f411      	BRNE _0x26
                +
00014d e02b     +LDI R18 , LOW ( 11 )
00014e e030     +LDI R19 , HIGH ( 11 )
                 	__GETWRN 18,19,11
                 ; 0000 0086             }
                 _0x26:
                 ; 0000 0087 
                 ; 0000 0088             // Set the compare value for the timer
                 ; 0000 0089             OCR2 = (unsigned char)ocr_value;
00014f bd23      	OUT  0x23,R18
                 ; 0000 008A 
                 ; 0000 008B             // Enable Timer2 Compare Match Interrupt to start the sound
                 ; 0000 008C             TIMSK |= (1 << OCIE2);
000150 b7e9      	IN   R30,0x39
000151 68e0      	ORI  R30,0x80
000152 bfe9      	OUT  0x39,R30
                 ; 0000 008D 
                 ; 0000 008E             // Play the tone for 200ms
                 ; 0000 008F             delay_ms(200);
000153 eca8      	LDI  R26,LOW(200)
000154 e0b0      	LDI  R27,0
000155 940e 01f1 	CALL _delay_ms
                 ; 0000 0090 
                 ; 0000 0091             // Disable the interrupt and turn the buzzer off
                 ; 0000 0092             TIMSK &= ~(1 << OCIE2);
000157 b7e9      	IN   R30,0x39
000158 77ef      	ANDI R30,0x7F
000159 bfe9      	OUT  0x39,R30
                 ; 0000 0093             PORTB.7 = 0;
00015a 98c7      	CBI  0x18,7
                 ; 0000 0094         }
                 ; 0000 0095     }
                 _0x21:
00015b cf95      	RJMP _0x1E
                 ; 0000 0096 }
                 _0x33:
00015c cfff      	RJMP _0x33
                 ; .FEND
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00015d 93aa      	ST   -Y,R26
00015e b3eb      	IN   R30,0x1B
00015f 70ef      	ANDI R30,LOW(0xF)
000160 2fae      	MOV  R26,R30
000161 81e8      	LD   R30,Y
000162 7fe0      	ANDI R30,LOW(0xF0)
000163 2bea      	OR   R30,R26
000164 bbeb      	OUT  0x1B,R30
                +
000165 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000166 958a     +DEC R24
000167 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000168 9ada      	SBI  0x1B,2
                +
000169 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00016a 958a     +DEC R24
00016b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00016c 98da      	CBI  0x1B,2
                +
00016d e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00016e 958a     +DEC R24
00016f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000170 c073      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000171 93aa      	ST   -Y,R26
000172 81a8      	LD   R26,Y
000173 dfe9      	RCALL __lcd_write_nibble_G100
000174 81e8          ld    r30,y
000175 95e2          swap  r30
000176 83e8          st    y,r30
000177 81a8      	LD   R26,Y
000178 dfe4      	RCALL __lcd_write_nibble_G100
                +
000179 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00017a 958a     +DEC R24
00017b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00017c c067      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00017d 93aa      	ST   -Y,R26
00017e 81e8      	LD   R30,Y
00017f e0f0      	LDI  R31,0
000180 5ae0      	SUBI R30,LOW(-__base_y_G100)
000181 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000182 81e0      	LD   R30,Z
000183 81a9      	LDD  R26,Y+1
000184 0fae      	ADD  R26,R30
000185 dfeb      	RCALL __lcd_write_data
000186 8059      	LDD  R5,Y+1
000187 8048      	LDD  R4,Y+0
000188 9622      	ADIW R28,2
000189 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00018a e0a2      	LDI  R26,LOW(2)
00018b d05a      	RCALL SUBOPT_0x0
00018c e0ac      	LDI  R26,LOW(12)
00018d dfe3      	RCALL __lcd_write_data
00018e e0a1      	LDI  R26,LOW(1)
00018f d056      	RCALL SUBOPT_0x0
000190 e0e0      	LDI  R30,LOW(0)
000191 2e4e      	MOV  R4,R30
000192 2e5e      	MOV  R5,R30
000193 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000194 93aa      	ST   -Y,R26
000195 81a8      	LD   R26,Y
000196 30aa      	CPI  R26,LOW(0xA)
000197 f011      	BREQ _0x2000005
000198 1457      	CP   R5,R7
000199 f048      	BRLO _0x2000004
                 _0x2000005:
00019a e0e0      	LDI  R30,LOW(0)
00019b 93ea      	ST   -Y,R30
00019c 9443      	INC  R4
00019d 2da4      	MOV  R26,R4
00019e dfde      	RCALL _lcd_gotoxy
00019f 81a8      	LD   R26,Y
0001a0 30aa      	CPI  R26,LOW(0xA)
0001a1 f409      	BRNE _0x2000007
0001a2 c041      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
0001a3 9453      	INC  R5
0001a4 9ad8      	SBI  0x1B,0
0001a5 81a8      	LD   R26,Y
0001a6 dfca      	RCALL __lcd_write_data
0001a7 98d8      	CBI  0x1B,0
0001a8 c03b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0001a9 93ba      	ST   -Y,R27
0001aa 93aa      	ST   -Y,R26
0001ab 931a      	ST   -Y,R17
                 _0x200000B:
0001ac 81e9      	LDD  R30,Y+1
0001ad 81fa      	LDD  R31,Y+1+1
0001ae 9631      	ADIW R30,1
0001af 83e9      	STD  Y+1,R30
0001b0 83fa      	STD  Y+1+1,R31
0001b1 9731      	SBIW R30,1
0001b2 91e4      	LPM  R30,Z
0001b3 2f1e      	MOV  R17,R30
0001b4 30e0      	CPI  R30,0
0001b5 f019      	BREQ _0x200000D
0001b6 2fa1      	MOV  R26,R17
0001b7 dfdc      	RCALL _lcd_putchar
0001b8 cff3      	RJMP _0x200000B
                 _0x200000D:
0001b9 8118      	LDD  R17,Y+0
0001ba 9623      	ADIW R28,3
0001bb 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001bc 93aa      	ST   -Y,R26
0001bd b3ea      	IN   R30,0x1A
0001be 6fe0      	ORI  R30,LOW(0xF0)
0001bf bbea      	OUT  0x1A,R30
0001c0 9ad2      	SBI  0x1A,2
0001c1 9ad0      	SBI  0x1A,0
0001c2 9ad1      	SBI  0x1A,1
0001c3 98da      	CBI  0x1B,2
0001c4 98d8      	CBI  0x1B,0
0001c5 98d9      	CBI  0x1B,1
0001c6 8078      	LDD  R7,Y+0
0001c7 81e8      	LD   R30,Y
0001c8 58e0      	SUBI R30,-LOW(128)
                +
0001c9 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001cb 81e8      	LD   R30,Y
0001cc 54e0      	SUBI R30,-LOW(192)
                +
0001cd 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001cf e1a4      	LDI  R26,LOW(20)
0001d0 e0b0      	LDI  R27,0
0001d1 940e 01f1 	CALL _delay_ms
0001d3 d017      	RCALL SUBOPT_0x1
0001d4 d016      	RCALL SUBOPT_0x1
0001d5 d015      	RCALL SUBOPT_0x1
0001d6 e2a0      	LDI  R26,LOW(32)
0001d7 df85      	RCALL __lcd_write_nibble_G100
                +
0001d8 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001d9 958a     +DEC R24
0001da f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001db e2a8      	LDI  R26,LOW(40)
0001dc df94      	RCALL __lcd_write_data
0001dd e0a4      	LDI  R26,LOW(4)
0001de df92      	RCALL __lcd_write_data
0001df e8a5      	LDI  R26,LOW(133)
0001e0 df90      	RCALL __lcd_write_data
0001e1 e0a6      	LDI  R26,LOW(6)
0001e2 df8e      	RCALL __lcd_write_data
0001e3 dfa6      	RCALL _lcd_clear
                 _0x2020001:
0001e4 9621      	ADIW R28,1
0001e5 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001e6 df8a      	RCALL __lcd_write_data
0001e7 e0a3      	LDI  R26,LOW(3)
0001e8 e0b0      	LDI  R27,0
0001e9 940c 01f1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0001eb e3a0      	LDI  R26,LOW(48)
0001ec df70      	RCALL __lcd_write_nibble_G100
                +
0001ed e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001ee 958a     +DEC R24
0001ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001f0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001f1 9610      	adiw r26,0
0001f2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001f3 ef8a     +LDI R24 , LOW ( 0xFA )
0001f4 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001f5 9701     +SBIW R24 , 1
0001f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001f7 95a8      	wdr
0001f8 9711      	sbiw r26,1
0001f9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001fa 9508      	ret
                 
                 __LSLB12:
0001fb 23ee      	TST  R30
0001fc 2e0e      	MOV  R0,R30
0001fd 2fea      	MOV  R30,R26
0001fe f019      	BREQ __LSLB12R
                 __LSLB12L:
0001ff 0fee      	LSL  R30
000200 940a      	DEC  R0
000201 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000202 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   6 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  16 r17:  17 r18:  11 r19:  10 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  23 r25:   3 r26:  71 r27:   9 r28:   4 r29:   1 r30: 126 r31:  22 
x  :   3 y  :  35 z  :   9 
Registers used: 21 out of 35 (60.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   5 and   :   1 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   0 brmi  :   0 brne  :  41 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   5 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :   1 cpc   :  13 cpi   :  32 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   9 inc   :   2 jmp   :  23 ld    :  13 ldd   :   7 ldi   : 106 
lds   :   0 lpm   :   9 lsl   :   1 lsr   :   0 mov   :  16 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   2 out   :  24 pop   :   0 push  :   0 rcall :  28 ret   :   8 
reti  :   1 rjmp  :  37 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   6 sbic  :   0 sbis  :   1 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  17 std   :   2 sts   :   2 sub   :   0 subi  :   4 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 45 out of 116 (38.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000406    996     34   1030   32768   3.1%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
