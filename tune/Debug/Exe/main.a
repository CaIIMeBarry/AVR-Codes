;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h> // Make sure to include the LCD library
;
;// Function to get the pressed key from the 4x4 keypad
;char get_keypad_key()
; 0000 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0008     unsigned char row, col;
; 0000 0009     // The keypad is connected to PORTC. We will scan it.
; 0000 000A     for(row = 0; row < 4; row++)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	row -> R17
;	col -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 000B     {
; 0000 000C         // Set all PORTC pins to input with pull-ups initially
; 0000 000D         DDRC = 0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 000E         PORTC = 0xFF;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 000F 
; 0000 0010         // Set the current row pin to output low
; 0000 0011         // Rows are PC0, PC1, PC2, PC3
; 0000 0012         DDRC |= (1 << row);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0013         PORTC &= ~(1 << row);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0014 
; 0000 0015         delay_us(100); // Small delay for signal to settle
;PCODE: $0000002D VOL: 0
; 0000 0016 
; 0000 0017         // Read the columns (PC4 to PC7)
; 0000 0018         col = (PINC & 0xF0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0019 
; 0000 001A         if (col != 0xF0) // A column has been pulled low
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001B         {
; 0000 001C             // A key is pressed, debounce and confirm
; 0000 001D             delay_ms(20);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 001E             col = (PINC & 0xF0);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 001F             if (col != 0xF0)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0020             {
; 0000 0021                  // Wait for key release. The row is still being driven low,
; 0000 0022                  // so this will now correctly wait until the button is let go.
; 0000 0023                  while((PINC & 0xF0) != 0xF0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0024 
; 0000 0025                  switch(row)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0026                  {
; 0000 0027                      case 0: // Top row (Schematic Row 'A')
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0028                          if (col == 0xE0) return '7'; // 0b11100000
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0029                          if (col == 0xD0) return '8'; // 0b11010000
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 002A                          if (col == 0xB0) return '9'; // 0b10110000
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 002B                          break;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 002C                      case 1: // Second row (Schematic Row 'B')
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 002D                          if (col == 0xE0) return '4';
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 002E                          if (col == 0xD0) return '5';
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 002F                          if (col == 0xB0) return '6';
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0030                          break;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0031                      case 2: // Third row (Schematic Row 'C')
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0032                          if (col == 0xE0) return '1';
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0033                          if (col == 0xD0) return '2';
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0034                          if (col == 0xB0) return '3';
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0035                          break;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0036                      case 3: // Bottom row (Schematic Row 'D')
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0037                          if (col == 0xD0) return '0';
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0038                          break;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0039                  }
;PCODE: $0000009B VOL: 0
; 0000 003A             }
; 0000 003B         }
;PCODE: $0000009C VOL: 0
; 0000 003C     }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 003D     return 0; // No valid key pressed
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 003E }
;PCODE: $000000A6 VOL: 0
;
;// Timer2 Compare Match Interrupt Service Routine
;// This ISR is called every time TCNT2 matches OCR2
;interrupt [TIM2_COMP] void timer2_comp_isr(void)
; 0000 0043 {
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0044     // Toggle the buzzer pin on PB7 to create a square wave
; 0000 0045     PORTB.7 = !PORTB.7;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0046 }
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;
;void main(void)
; 0000 0049 {
;PCODE: $000000B6 VOL: 0
; 0000 004A     char key;
; 0000 004B     unsigned int ocr_value;
; 0000 004C 
; 0000 004D 
; 0000 004E     // Port B initialization
; 0000 004F     // Set PB7 as output for the buzzer.
; 0000 0050     DDRB = (1 << DDB7);
;	key -> R17
;	ocr_value -> R18,R19
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0051     PORTB = 0x00; // Buzzer off initially
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0052 
; 0000 0053     // Port C initialization for Keypad
; 0000 0054     DDRC = 0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0055     PORTC = 0xFF; // All pins input with pull-ups
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0056 
; 0000 0057     // Timer/Counter 2 initialization
; 0000 0058     // Mode: CTC top=OCR2
; 0000 0059     // We use an interrupt to toggle PB7, so OC2 pin is disconnected.
; 0000 005A     ASSR = 0 << AS2;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 005B     // WGM21=1 for CTC mode, CS22=1 for prescaler of 64
; 0000 005C     TCCR2 = (1 << WGM21) | (1 << CS22);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 005D     TCNT2 = 0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 005E     OCR2 = 0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 005F 
; 0000 0060     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0061     TIMSK = (0 << OCIE2); // Interrupt is disabled initially
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0062 
; 0000 0063     // Alphanumeric LCD initialization
; 0000 0064     // Connections should be configured in your IDE (Project->Configure)
; 0000 0065     // to match your schematic (PORTA).
; 0000 0066     // Characters/line: 16
; 0000 0067     lcd_init(16);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0068     lcd_clear(); // Clear display at startup
;PCODE: $000000CB VOL: 0
; 0000 0069 
; 0000 006A     // Global enable interrupts
; 0000 006B     #asm("sei")
;PCODE: $000000CC VOL: 0
	sei
;PCODE: $000000CD VOL: 0
; 0000 006C 
; 0000 006D     while (1)
;PCODE: $000000CE VOL: 0
; 0000 006E     {
; 0000 006F         key = get_keypad_key();
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0070 
; 0000 0071         if (key >= '0' && key <= '9')
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0072         {
; 0000 0073             // A numeric key was pressed
; 0000 0074             lcd_gotoxy(0,1);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0075             lcd_putsf("                "); // Clear the second line
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0076             lcd_gotoxy(0,1);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0077             lcd_putsf("Key: ");
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0078             lcd_putchar(key);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0079 
; 0000 007A             // OCR values calculated for 1MHz clock and /64 prescaler
; 0000 007B             switch(key) {
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 007C                 case '0': ocr_value = 30; break; // C4
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 007D                 case '1': ocr_value = 26; break; // D4
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 007E                 case '2': ocr_value = 23; break; // E4
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 007F                 case '3': ocr_value = 22; break; // F4
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0080                 case '4': ocr_value = 19; break; // G4
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0081                 case '5': ocr_value = 17; break; // A4
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0082                 case '6': ocr_value = 15; break; // B4
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0083                 case '7': ocr_value = 14; break; // C5
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0084                 case '8': ocr_value = 12; break; // D5
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0085                 case '9': ocr_value = 11; break; // E5
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0086             }
;PCODE: $00000128 VOL: 0
; 0000 0087 
; 0000 0088             // Set the compare value for the timer
; 0000 0089             OCR2 = (unsigned char)ocr_value;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 008A 
; 0000 008B             // Enable Timer2 Compare Match Interrupt to start the sound
; 0000 008C             TIMSK |= (1 << OCIE2);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 008D 
; 0000 008E             // Play the tone for 200ms
; 0000 008F             delay_ms(200);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0090 
; 0000 0091             // Disable the interrupt and turn the buzzer off
; 0000 0092             TIMSK &= ~(1 << OCIE2);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0093             PORTB.7 = 0;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0094         }
; 0000 0095     }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0096 }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;
