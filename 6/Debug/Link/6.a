;#include <delay.h>
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;void main(void)
; 0000 0005 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0006     char s = 0;    // Seconds
; 0000 0007     char m = 0;    // Minutes
; 0000 0008     char h = 0;    // Hours
; 0000 0009     char y_1, d_1; // Units and tens for seconds
; 0000 000A     char y_2, d_2; // Units and tens for minutes
; 0000 000B     char y_3, d_3; // Units and tens for hours
; 0000 000C 
; 0000 000D 
; 0000 000E     DDRB = 0xFF;
;PCODE: $0000000E VOL: 0
;	s -> R17
;	m -> R16
;	h -> R19
;	y_1 -> R18
;	d_1 -> R21
;	y_2 -> R20
;	d_2 -> Y+2
;	y_3 -> Y+1
;	d_3 -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 000F     DDRA = 0xFF;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0010     DDRC = 0xFF;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0011 
; 0000 0012     while (1)
;PCODE: $0000001B VOL: 0
; 0000 0013     {
; 0000 0014 
; 0000 0015         s++;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0016         if (s >= 60)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0017         {
; 0000 0018             s = 0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0019             m++;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 001A             if (m >= 60)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 001B             {
; 0000 001C                 m = 0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001D                 h++;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001E                 if (h >= 24)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001F                 {
; 0000 0020                     h = 0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0021                 }
; 0000 0022             }
;PCODE: $00000031 VOL: 0
; 0000 0023         }
;PCODE: $00000032 VOL: 0
; 0000 0024 
; 0000 0025         d_1 = s / 10;  // Tens of seconds
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0026         y_1 = s % 10;  // Units of seconds
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0027         d_2 = m / 10;  // Tens of minutes
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0028         y_2 = m % 10;  // Units of minutes
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0029         d_3 = h / 10;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 002A         y_3 = h % 10;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 002B 
; 0000 002C         // Set ports for display
; 0000 002D         PORTA = (d_1 << 4) | y_1; // Seconds
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 002E         PORTB = (d_2 << 4) | y_2; // Minutes
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 002F         PORTC = (d_3 << 4) | y_3; // Hours
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0030 
; 0000 0031         delay_ms(12);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0032     }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0033 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
