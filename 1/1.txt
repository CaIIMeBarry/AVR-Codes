#include <mega32.h>
#include <delay.h>

// Segment patterns for digits 0-9 (common cathode)
unsigned char bts[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};

void main(void) {
    // Set Port A as output for segments
    DDRA = 0xFF;
    // Set Port B lower nibble as output for digit selection
    DDRB = 0x0F;

    // Initialize counter
    uint16_t count = 0;

    while (1) {
        // Extract individual digits
        uint8_t digit1 = count % 10;         // Units
        uint8_t digit2 = (count / 10) % 10;  // Tens
        uint8_t digit3 = (count / 100) % 10; // Hundreds
        uint8_t digit4 = (count / 1000) % 10;// Thousands

        // Multiplexing: Display each digit
        // Digit 1 (rightmost)
        PORTA = bts[digit1];
        PORTB = 0b00000001; // Activate Digit 1 (PB0)
        delay_ms(1);
        PORTB = 0b00000000; // Deactivate

        // Digit 2
        PORTA = bts[digit2];
        PORTB = 0b00000010; // Activate Digit 2 (PB1)
        delay_ms(1);
        PORTB = 0b00000000; // Deactivate

        // Digit 3
        PORTA = bts[digit3];
        PORTB = 0b00000100; // Activate Digit 3 (PB2)
        delay_ms(1);
        PORTB = 0b00000000; // Deactivate

        // Digit 4 (leftmost)
        PORTA = bts[digit4];
        PORTB = 0b00001000; // Activate Digit 4 (PB3)
        delay_ms(1);
        PORTB = 0b00000000; // Deactivate

        // Increment counter
        count++;
        if (count > 9999) {
            count = 0; // Reset to 0 after 9999
        }

        // Delay to control counting speed (100ms)
        delay_ms(100);
    }

}