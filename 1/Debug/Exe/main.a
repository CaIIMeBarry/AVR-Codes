;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;unsigned char ali_pattern[] = {0x77, 0x38, 0x30}; // A, L, I

	.DSEG
;signed char scroll_position = 0;// first position
;signed char direction = 0;//default first move 0=stop,1=r,-1=l
;unsigned int scroll_counter = 0;
;
;
;void main(void)
; 0000 000B {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 000C     DDRA = 0xFF;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 000D     DDRB = 0xFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000E     DDRC = 0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 000F     PORTC = 0x07;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0010 
; 0000 0011     while (1)
;PCODE: $00000016 VOL: 0
; 0000 0012     {       unsigned char digit;
; 0000 0013             unsigned char pos_A = ((scroll_position + 0) % 8 + 8) % 8;
; 0000 0014             unsigned char pos_L = ((scroll_position + 1) % 8 + 8) % 8;
; 0000 0015             unsigned char pos_I = ((scroll_position + 2) % 8 + 8) % 8;
; 0000 0016         //  Check Button States
; 0000 0017         if ((PINC & 0x01) == 0) direction = 1;
;PCODE: $00000017 VOL: 0
;	digit -> Y+3
;	pos_A -> Y+2
;	pos_L -> Y+1
;	pos_I -> Y+0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0018         if ((PINC & 0x02) == 0) direction = -1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0019         if ((PINC & 0x04) == 0) direction = 0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 001A 
; 0000 001B         // --- Part 2: Multiplex the 8-Digit Display
; 0000 001C 
; 0000 001D         for (digit = 0; digit < 8; digit++)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 001E         {
; 0000 001F             unsigned char pattern_to_show = 0x00; // Default to a blank digit
; 0000 0020 
; 0000 0021             PORTB = 0xFF; //prevent "ghosting"
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;	digit -> Y+4
;	pos_A -> Y+3
;	pos_L -> Y+2
;	pos_I -> Y+1
;	pattern_to_show -> Y+0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0022 
; 0000 0023 
; 0000 0024             if (digit == pos_A)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0025             {
; 0000 0026                 pattern_to_show = ali_pattern[0]; // Place 'A'
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0027             }
; 0000 0028             if (digit == pos_L)
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0029             {
; 0000 002A                 pattern_to_show = ali_pattern[1]; // Place 'L'
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 002B             }
; 0000 002C             if (digit == pos_I)
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 002D             {
; 0000 002E                 pattern_to_show = ali_pattern[2]; // Place 'I'
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 002F             }
; 0000 0030 
; 0000 0031             PORTA = pattern_to_show;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0032             PORTB = ~(1 << digit);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0033             delay_ms(1);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0034         }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0035 
; 0000 0036 
; 0000 0037         //Update Scroll Position/ Speed
; 0000 0038         scroll_counter++;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0039         if (scroll_counter > 30)
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 003A         {
; 0000 003B             scroll_counter = 0;
;PCODE: $00000084 VOL: 0
; 0000 003C             if (direction != 0)
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 003D             {
; 0000 003E                 scroll_position = scroll_position + direction;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 003F             }
; 0000 0040         }
;PCODE: $00000089 VOL: 0
; 0000 0041     }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0042 }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
