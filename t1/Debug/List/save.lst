
AVRASM ver. 2.1.30  C:\Users\Bardia\Desktop\28shahrivar\t1\Debug\List\save.asm Thu Sep 18 10:30:07 2025

C:\Users\Bardia\Desktop\28shahrivar\t1\Debug\List\save.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Bardia\Desktop\28shahrivar\t1\Debug\List\save.asm(1089): warning: Register r7 already defined by the .DEF directive
C:\Users\Bardia\Desktop\28shahrivar\t1\Debug\List\save.asm(1090): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0047 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6f56
000034 756c
000035 656d
000036 203a      	.DB  0x56,0x6F,0x6C,0x75,0x6D,0x65,0x3A,0x20
000037 5600
000038 6c6f
000039 6d75
00003a 3a65      	.DB  0x0,0x56,0x6F,0x6C,0x75,0x6D,0x65,0x3A
00003b 2520
00003c 2064
00003d 2020
C:\Users\Bardia\Desktop\28shahrivar\t1\Debug\List\save.asm(1130): warning: .cseg .db misalignment - padding zero byte
00003e 0000      	.DB  0x20,0x25,0x64,0x20,0x20,0x20,0x0
                 _0x2000003:
00003f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000040 0009      	.DW  0x09
000041 0260      	.DW  _0x4
000042 0066      	.DW  _0x0*2
                 
000043 0002      	.DW  0x02
000044 0269      	.DW  __base_y_G100
000045 007e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000046 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000047 94f8      	CLI
000048 27ee      	CLR  R30
000049 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004a e0f1      	LDI  R31,1
00004b bffb      	OUT  GICR,R31
00004c bfeb      	OUT  GICR,R30
00004d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004e e08d      	LDI  R24,(14-2)+1
00004f e0a2      	LDI  R26,2
000050 27bb      	CLR  R27
                 __CLEAR_REG:
000051 93ed      	ST   X+,R30
000052 958a      	DEC  R24
000053 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000054 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000055 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000056 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000057 93ed      	ST   X+,R30
000058 9701      	SBIW R24,1
000059 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005a e8e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005c 9185      	LPM  R24,Z+
00005d 9195      	LPM  R25,Z+
00005e 9700      	SBIW R24,0
00005f f061      	BREQ __GLOBAL_INI_END
000060 91a5      	LPM  R26,Z+
000061 91b5      	LPM  R27,Z+
000062 9005      	LPM  R0,Z+
000063 9015      	LPM  R1,Z+
000064 01bf      	MOVW R22,R30
000065 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000066 9005      	LPM  R0,Z+
000067 920d      	ST   X+,R0
000068 9701      	SBIW R24,1
000069 f7e1      	BRNE __GLOBAL_INI_LOOP
00006a 01fb      	MOVW R30,R22
00006b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006d bfed      	OUT  SPL,R30
00006e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000070 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000071 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000072 940c 00a6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <i2c.h>
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;
                 ;#define COUNTER_EEPROM_ADDR 0
                 ;
                 ;void memw(unsigned int add, unsigned char data)
                 ; 0000 000B {
                 
                 	.CSEG
                 _memw:
                 ; .FSTART _memw
                 ; 0000 000C     unsigned char addh, addl;
                 ; 0000 000D     addh = add >> 8;
000074 93aa      	ST   -Y,R26
000075 931a      	ST   -Y,R17
000076 930a      	ST   -Y,R16
                 ;	add -> Y+3
                 ;	data -> Y+2
                 ;	addh -> R17
                 ;	addl -> R16
000077 811c      	LDD  R17,Y+4
                 ; 0000 000E     addl = add;
000078 810b      	LDD  R16,Y+3
                 ; 0000 000F     i2c_start();
000079 940e 0341 	CALL SUBOPT_0x0
                 ; 0000 0010     i2c_write(0xa0);
                 ; 0000 0011     i2c_write(addh);
                 ; 0000 0012     i2c_write(addl);
                 ; 0000 0013     i2c_write(data);
00007b 81aa      	LDD  R26,Y+2
00007c 940e 03c5 	CALL _i2c_write
                 ; 0000 0014     i2c_stop();
00007e 940e 03a0 	CALL _i2c_stop
                 ; 0000 0015     delay_ms(10);
000080 e0aa      	LDI  R26,LOW(10)
000081 e0b0      	LDI  R27,0
000082 940e 03dd 	CALL _delay_ms
                 ; 0000 0016 }
000084 940c 01bc 	JMP  _0x2080002
                 ; .FEND
                 ;
                 ;
                 ;unsigned char memr(unsigned int add)
                 ; 0000 001A {
                 _memr:
                 ; .FSTART _memr
                 ; 0000 001B     unsigned char addh, addl;
                 ; 0000 001C     unsigned char data;
                 ; 0000 001D     addh = add >> 8;
000086 93ba      	ST   -Y,R27
000087 93aa      	ST   -Y,R26
000088 940e 03fe 	CALL __SAVELOCR4
                 ;	add -> Y+4
                 ;	addh -> R17
                 ;	addl -> R16
                 ;	data -> R19
00008a 811d      	LDD  R17,Y+5
                 ; 0000 001E     addl = add;
00008b 810c      	LDD  R16,Y+4
                 ; 0000 001F     i2c_start();
00008c 940e 0341 	CALL SUBOPT_0x0
                 ; 0000 0020     i2c_write(0xa0);
                 ; 0000 0021     i2c_write(addh);
                 ; 0000 0022     i2c_write(addl);
                 ; 0000 0023     delay_ms(5);
00008e e0a5      	LDI  R26,LOW(5)
00008f e0b0      	LDI  R27,0
000090 940e 03dd 	CALL _delay_ms
                 ; 0000 0024     i2c_start();
000092 940e 0391 	CALL _i2c_start
                 ; 0000 0025     i2c_write(0xa1);
000094 eaa1      	LDI  R26,LOW(161)
000095 940e 03c5 	CALL _i2c_write
                 ; 0000 0026     data = i2c_read(0);
000097 e0a0      	LDI  R26,LOW(0)
000098 940e 03aa 	CALL _i2c_read
00009a 2f3e      	MOV  R19,R30
                 ; 0000 0027     i2c_stop();
00009b 940e 03a0 	CALL _i2c_stop
                 ; 0000 0028     delay_ms(5);
00009d e0a5      	LDI  R26,LOW(5)
00009e e0b0      	LDI  R27,0
00009f 940e 03dd 	CALL _delay_ms
                 ; 0000 0029     return data;
0000a1 2fe3      	MOV  R30,R19
0000a2 940e 0405 	CALL __LOADLOCR4
0000a4 9626      	ADIW R28,6
0000a5 9508      	RET
                 ; 0000 002A }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 002D {
                 _main:
                 ; .FSTART _main
                 ; 0000 002E 
                 ; 0000 002F     unsigned char counter;
                 ; 0000 0030     //forcing the first LCD update
                 ; 0000 0031     int old_counter = -1;
                 ; 0000 0032     char lcd_buffer[17];
                 ; 0000 0033     i2c_init();
0000a6 9761      	SBIW R28,17
                 ;	counter -> R17
                 ;	old_counter -> R18,R19
                 ;	lcd_buffer -> Y+0
                +
0000a7 ef2f     +LDI R18 , LOW ( - 1 )
0000a8 ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
0000a9 940e 038c 	CALL _i2c_init
                 ; 0000 0034     lcd_init(16);
0000ab e1a0      	LDI  R26,LOW(16)
0000ac d0a6      	RCALL _lcd_init
                 ; 0000 0035     counter = memr(COUNTER_EEPROM_ADDR);
0000ad e0a0      	LDI  R26,LOW(0)
0000ae e0b0      	LDI  R27,0
0000af dfd6      	RCALL _memr
0000b0 2f1e      	MOV  R17,R30
                 ; 0000 0036 
                 ; 0000 0037     if (counter > 100)
0000b1 3615      	CPI  R17,101
0000b2 f008      	BRLO _0x3
                 ; 0000 0038     {
                 ; 0000 0039         counter = 0; // Default
0000b3 e010      	LDI  R17,LOW(0)
                 ; 0000 003A     }
                 ; 0000 003B 
                 ; 0000 003C     lcd_clear();
                 _0x3:
0000b4 d06c      	RCALL _lcd_clear
                 ; 0000 003D     lcd_puts("Volume: ");
                +
0000b5 e6a0     +LDI R26 , LOW ( _0x4 + ( 0 ) )
0000b6 e0b2     +LDI R27 , HIGH ( _0x4 + ( 0 ) )
                 	__POINTW2MN _0x4,0
0000b7 d08a      	RCALL _lcd_puts
                 ; 0000 003E     delay_ms(1500);
0000b8 edac      	LDI  R26,LOW(1500)
0000b9 e0b5      	LDI  R27,HIGH(1500)
0000ba 940e 03dd 	CALL _delay_ms
                 ; 0000 003F 
                 ; 0000 0040     while (1)
                 _0x5:
                 ; 0000 0041     {
                 ; 0000 0042 
                 ; 0000 0043         if (PINB.5 == 0)
0000bc 99b5      	SBIC 0x16,5
0000bd c007      	RJMP _0x8
                 ; 0000 0044         {
                 ; 0000 0045 
                 ; 0000 0046             while (PINB.5 == 0);
                 _0x9:
0000be 9bb5      	SBIS 0x16,5
0000bf cffe      	RJMP _0x9
                 ; 0000 0047 
                 ; 0000 0048             if (counter < 100)
0000c0 3614      	CPI  R17,100
0000c1 f418      	BRSH _0xC
                 ; 0000 0049             {
                 ; 0000 004A                 counter++;
0000c2 5f1f      	SUBI R17,-1
                 ; 0000 004B                 memw(COUNTER_EEPROM_ADDR, counter);
0000c3 940e 034c 	CALL SUBOPT_0x1
                 ; 0000 004C             }
                 ; 0000 004D         }
                 _0xC:
                 ; 0000 004E 
                 ; 0000 004F 
                 ; 0000 0050         if (PINB.7 == 0)
                 _0x8:
0000c5 99b7      	SBIC 0x16,7
0000c6 c007      	RJMP _0xD
                 ; 0000 0051         {
                 ; 0000 0052 
                 ; 0000 0053             while (PINB.7 == 0);
                 _0xE:
0000c7 9bb7      	SBIS 0x16,7
0000c8 cffe      	RJMP _0xE
                 ; 0000 0054 
                 ; 0000 0055             if (counter > 0)
0000c9 3011      	CPI  R17,1
0000ca f018      	BRLO _0x11
                 ; 0000 0056             {
                 ; 0000 0057                 counter--;
0000cb 5011      	SUBI R17,1
                 ; 0000 0058                 memw(COUNTER_EEPROM_ADDR, counter);
0000cc 940e 034c 	CALL SUBOPT_0x1
                 ; 0000 0059             }
                 ; 0000 005A         }
                 _0x11:
                 ; 0000 005B 
                 ; 0000 005C         if (counter != old_counter)
                 _0xD:
0000ce 01f9      	MOVW R30,R18
0000cf 2fa1      	MOV  R26,R17
0000d0 e0b0      	LDI  R27,0
0000d1 17ea      	CP   R30,R26
0000d2 07fb      	CPC  R31,R27
0000d3 f0d1      	BREQ _0x12
                 ; 0000 005D         {
                 ; 0000 005E             sprintf(lcd_buffer, "Volume: %d   ", counter);
0000d4 01fe      	MOVW R30,R28
0000d5 93fa      	ST   -Y,R31
0000d6 93ea      	ST   -Y,R30
                +
0000d7 e6ef     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
0000d8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
0000d9 93fa      	ST   -Y,R31
0000da 93ea      	ST   -Y,R30
0000db 2fe1      	MOV  R30,R17
0000dc 27ff      	CLR  R31
0000dd 2766      	CLR  R22
0000de 2777      	CLR  R23
0000df 940e 03f7 	CALL __PUTPARD1
0000e1 e084      	LDI  R24,4
0000e2 940e 02f4 	CALL _sprintf
0000e4 9628      	ADIW R28,8
                 ; 0000 005F 
                 ; 0000 0060             lcd_clear();
0000e5 d03b      	RCALL _lcd_clear
                 ; 0000 0061             lcd_gotoxy(0, 0);
0000e6 e0e0      	LDI  R30,LOW(0)
0000e7 93ea      	ST   -Y,R30
0000e8 e0a0      	LDI  R26,LOW(0)
0000e9 d02a      	RCALL _lcd_gotoxy
                 ; 0000 0062             lcd_puts(lcd_buffer);
0000ea 01de      	MOVW R26,R28
0000eb d056      	RCALL _lcd_puts
                 ; 0000 0063             old_counter = counter;
0000ec 2f21      	MOV  R18,R17
0000ed 2733      	CLR  R19
                 ; 0000 0064         }
                 ; 0000 0065 
                 ; 0000 0066         delay_ms(20);
                 _0x12:
0000ee e1a4      	LDI  R26,LOW(20)
0000ef e0b0      	LDI  R27,0
0000f0 940e 03dd 	CALL _delay_ms
                 ; 0000 0067     }
0000f2 cfc9      	RJMP _0x5
                 ; 0000 0068 }
                 _0x13:
0000f3 cfff      	RJMP _0x13
                 ; .FEND
                 
                 	.DSEG
                 _0x4:
000260           	.BYTE 0x9
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000f4 93aa      	ST   -Y,R26
0000f5 b3eb      	IN   R30,0x1B
0000f6 70ef      	ANDI R30,LOW(0xF)
0000f7 2fae      	MOV  R26,R30
0000f8 81e8      	LD   R30,Y
0000f9 7fe0      	ANDI R30,LOW(0xF0)
0000fa 2bea      	OR   R30,R26
0000fb bbeb      	OUT  0x1B,R30
                +
0000fc e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000fd 958a     +DEC R24
0000fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000ff 9ada      	SBI  0x1B,2
                +
000100 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000101 958a     +DEC R24
000102 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000103 98da      	CBI  0x1B,2
                +
000104 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000105 958a     +DEC R24
000106 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000107 c076      	RJMP _0x2080003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000108 93aa      	ST   -Y,R26
000109 81a8      	LD   R26,Y
00010a dfe9      	RCALL __lcd_write_nibble_G100
00010b 81e8          ld    r30,y
00010c 95e2          swap  r30
00010d 83e8          st    y,r30
00010e 81a8      	LD   R26,Y
00010f dfe4      	RCALL __lcd_write_nibble_G100
                +
000110 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000111 958a     +DEC R24
000112 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000113 c06a      	RJMP _0x2080003
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000114 93aa      	ST   -Y,R26
000115 81e8      	LD   R30,Y
000116 e0f0      	LDI  R31,0
000117 59e7      	SUBI R30,LOW(-__base_y_G100)
000118 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000119 81e0      	LD   R30,Z
00011a 81a9      	LDD  R26,Y+1
00011b 0fae      	ADD  R26,R30
00011c dfeb      	RCALL __lcd_write_data
00011d 8049      	LDD  R4,Y+1
00011e 8078      	LDD  R7,Y+0
00011f 9622      	ADIW R28,2
000120 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000121 e0a2      	LDI  R26,LOW(2)
000122 940e 0353 	CALL SUBOPT_0x2
000124 e0ac      	LDI  R26,LOW(12)
000125 dfe2      	RCALL __lcd_write_data
000126 e0a1      	LDI  R26,LOW(1)
000127 940e 0353 	CALL SUBOPT_0x2
000129 e0e0      	LDI  R30,LOW(0)
00012a 2e7e      	MOV  R7,R30
00012b 2e4e      	MOV  R4,R30
00012c 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00012d 93aa      	ST   -Y,R26
00012e 81a8      	LD   R26,Y
00012f 30aa      	CPI  R26,LOW(0xA)
000130 f011      	BREQ _0x2000005
000131 1446      	CP   R4,R6
000132 f048      	BRLO _0x2000004
                 _0x2000005:
000133 e0e0      	LDI  R30,LOW(0)
000134 93ea      	ST   -Y,R30
000135 9473      	INC  R7
000136 2da7      	MOV  R26,R7
000137 dfdc      	RCALL _lcd_gotoxy
000138 81a8      	LD   R26,Y
000139 30aa      	CPI  R26,LOW(0xA)
00013a f409      	BRNE _0x2000007
00013b c042      	RJMP _0x2080003
                 _0x2000007:
                 _0x2000004:
00013c 9443      	INC  R4
00013d 9ad8      	SBI  0x1B,0
00013e 81a8      	LD   R26,Y
00013f dfc8      	RCALL __lcd_write_data
000140 98d8      	CBI  0x1B,0
000141 c03c      	RJMP _0x2080003
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000142 93ba      	ST   -Y,R27
000143 93aa      	ST   -Y,R26
000144 931a      	ST   -Y,R17
                 _0x2000008:
000145 81a9      	LDD  R26,Y+1
000146 81ba      	LDD  R27,Y+1+1
000147 91ed      	LD   R30,X+
000148 83a9      	STD  Y+1,R26
000149 83ba      	STD  Y+1+1,R27
00014a 2f1e      	MOV  R17,R30
00014b 30e0      	CPI  R30,0
00014c f019      	BREQ _0x200000A
00014d 2fa1      	MOV  R26,R17
00014e dfde      	RCALL _lcd_putchar
00014f cff5      	RJMP _0x2000008
                 _0x200000A:
000150 8118      	LDD  R17,Y+0
000151 9623      	ADIW R28,3
000152 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000153 93aa      	ST   -Y,R26
000154 b3ea      	IN   R30,0x1A
000155 6fe0      	ORI  R30,LOW(0xF0)
000156 bbea      	OUT  0x1A,R30
000157 9ad2      	SBI  0x1A,2
000158 9ad0      	SBI  0x1A,0
000159 9ad1      	SBI  0x1A,1
00015a 98da      	CBI  0x1B,2
00015b 98d8      	CBI  0x1B,0
00015c 98d9      	CBI  0x1B,1
00015d 8068      	LDD  R6,Y+0
00015e 81e8      	LD   R30,Y
00015f 58e0      	SUBI R30,-LOW(128)
                +
000160 93e0 026b+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000162 81e8      	LD   R30,Y
000163 54e0      	SUBI R30,-LOW(192)
                +
000164 93e0 026c+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000166 e1a4      	LDI  R26,LOW(20)
000167 e0b0      	LDI  R27,0
000168 940e 03dd 	CALL _delay_ms
00016a 940e 0359 	CALL SUBOPT_0x3
00016c 940e 0359 	CALL SUBOPT_0x3
00016e 940e 0359 	CALL SUBOPT_0x3
000170 e2a0      	LDI  R26,LOW(32)
000171 df82      	RCALL __lcd_write_nibble_G100
                +
000172 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000173 958a     +DEC R24
000174 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000175 e2a8      	LDI  R26,LOW(40)
000176 df91      	RCALL __lcd_write_data
000177 e0a4      	LDI  R26,LOW(4)
000178 df8f      	RCALL __lcd_write_data
000179 e8a5      	LDI  R26,LOW(133)
00017a df8d      	RCALL __lcd_write_data
00017b e0a6      	LDI  R26,LOW(6)
00017c df8b      	RCALL __lcd_write_data
00017d dfa3      	RCALL _lcd_clear
                 _0x2080003:
00017e 9621      	ADIW R28,1
00017f 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000180 93ba      	ST   -Y,R27
000181 93aa      	ST   -Y,R26
000182 931a      	ST   -Y,R17
000183 930a      	ST   -Y,R16
000184 81aa      	LDD  R26,Y+2
000185 81bb      	LDD  R27,Y+2+1
000186 9612      	ADIW R26,2
000187 940e 03ef 	CALL __GETW1P
000189 9730      	SBIW R30,0
00018a f159      	BREQ _0x2020010
00018b 81aa      	LDD  R26,Y+2
00018c 81bb      	LDD  R27,Y+2+1
00018d 9614      	ADIW R26,4
00018e 940e 03ef 	CALL __GETW1P
000190 018f      	MOVW R16,R30
000191 9730      	SBIW R30,0
000192 f061      	BREQ _0x2020012
                +
000193 3002     +CPI R16 , LOW ( 2 )
000194 e0e0     +LDI R30 , HIGH ( 2 )
000195 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000196 f098      	BRLO _0x2020013
000197 01f8      	MOVW R30,R16
000198 9731      	SBIW R30,1
000199 018f      	MOVW R16,R30
                +
00019a 81aa     +LDD R26 , Y + 2
00019b 81bb     +LDD R27 , Y + 2 + 1
00019c 9614     +ADIW R26 , 4
00019d 93ed     +ST X + , R30
00019e 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00019f 81aa      	LDD  R26,Y+2
0001a0 81bb      	LDD  R27,Y+2+1
0001a1 9612      	ADIW R26,2
0001a2 91ed      	LD   R30,X+
0001a3 91fd      	LD   R31,X+
0001a4 9631      	ADIW R30,1
0001a5 93fe      	ST   -X,R31
0001a6 93ee      	ST   -X,R30
0001a7 9731      	SBIW R30,1
0001a8 81ac      	LDD  R26,Y+4
0001a9 83a0      	STD  Z+0,R26
                 _0x2020013:
0001aa 81aa      	LDD  R26,Y+2
0001ab 81bb      	LDD  R27,Y+2+1
0001ac 940e 03ef 	CALL __GETW1P
0001ae 23ff      	TST  R31
0001af f02a      	BRMI _0x2020014
0001b0 91ed      	LD   R30,X+
0001b1 91fd      	LD   R31,X+
0001b2 9631      	ADIW R30,1
0001b3 93fe      	ST   -X,R31
0001b4 93ee      	ST   -X,R30
                 _0x2020014:
0001b5 c006      	RJMP _0x2020015
                 _0x2020010:
0001b6 81aa      	LDD  R26,Y+2
0001b7 81bb      	LDD  R27,Y+2+1
0001b8 efef      	LDI  R30,LOW(65535)
0001b9 efff      	LDI  R31,HIGH(65535)
0001ba 93ed      	ST   X+,R30
0001bb 93fc      	ST   X,R31
                 _0x2020015:
                 _0x2080002:
0001bc 8119      	LDD  R17,Y+1
0001bd 8108      	LDD  R16,Y+0
0001be 9625      	ADIW R28,5
0001bf 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001c0 93ba      	ST   -Y,R27
0001c1 93aa      	ST   -Y,R26
0001c2 9726      	SBIW R28,6
0001c3 940e 03fc 	CALL __SAVELOCR6
0001c5 e010      	LDI  R17,0
0001c6 85ac      	LDD  R26,Y+12
0001c7 85bd      	LDD  R27,Y+12+1
0001c8 e0e0      	LDI  R30,LOW(0)
0001c9 e0f0      	LDI  R31,HIGH(0)
0001ca 93ed      	ST   X+,R30
0001cb 93fc      	ST   X,R31
                 _0x2020016:
0001cc 89ea      	LDD  R30,Y+18
0001cd 89fb      	LDD  R31,Y+18+1
0001ce 9631      	ADIW R30,1
0001cf 8bea      	STD  Y+18,R30
0001d0 8bfb      	STD  Y+18+1,R31
0001d1 9731      	SBIW R30,1
0001d2 91e4      	LPM  R30,Z
0001d3 2f2e      	MOV  R18,R30
0001d4 30e0      	CPI  R30,0
0001d5 f409      	BRNE PC+2
0001d6 c115      	RJMP _0x2020018
0001d7 2fe1      	MOV  R30,R17
0001d8 30e0      	CPI  R30,0
0001d9 f439      	BRNE _0x202001C
0001da 3225      	CPI  R18,37
0001db f411      	BRNE _0x202001D
0001dc e011      	LDI  R17,LOW(1)
0001dd c002      	RJMP _0x202001E
                 _0x202001D:
0001de 940e 0360 	CALL SUBOPT_0x4
                 _0x202001E:
0001e0 c10a      	RJMP _0x202001B
                 _0x202001C:
0001e1 30e1      	CPI  R30,LOW(0x1)
0001e2 f4a9      	BRNE _0x202001F
0001e3 3225      	CPI  R18,37
0001e4 f419      	BRNE _0x2020020
0001e5 940e 0360 	CALL SUBOPT_0x4
0001e7 c102      	RJMP _0x20200CC
                 _0x2020020:
0001e8 e012      	LDI  R17,LOW(2)
0001e9 e040      	LDI  R20,LOW(0)
0001ea e000      	LDI  R16,LOW(0)
0001eb 322d      	CPI  R18,45
0001ec f411      	BRNE _0x2020021
0001ed e001      	LDI  R16,LOW(1)
0001ee c0fc      	RJMP _0x202001B
                 _0x2020021:
0001ef 322b      	CPI  R18,43
0001f0 f411      	BRNE _0x2020022
0001f1 e24b      	LDI  R20,LOW(43)
0001f2 c0f8      	RJMP _0x202001B
                 _0x2020022:
0001f3 3220      	CPI  R18,32
0001f4 f411      	BRNE _0x2020023
0001f5 e240      	LDI  R20,LOW(32)
0001f6 c0f4      	RJMP _0x202001B
                 _0x2020023:
0001f7 c002      	RJMP _0x2020024
                 _0x202001F:
0001f8 30e2      	CPI  R30,LOW(0x2)
0001f9 f439      	BRNE _0x2020025
                 _0x2020024:
0001fa e050      	LDI  R21,LOW(0)
0001fb e013      	LDI  R17,LOW(3)
0001fc 3320      	CPI  R18,48
0001fd f411      	BRNE _0x2020026
0001fe 6800      	ORI  R16,LOW(128)
0001ff c0eb      	RJMP _0x202001B
                 _0x2020026:
000200 c003      	RJMP _0x2020027
                 _0x2020025:
000201 30e3      	CPI  R30,LOW(0x3)
000202 f009      	BREQ PC+2
000203 c0e7      	RJMP _0x202001B
                 _0x2020027:
000204 3320      	CPI  R18,48
000205 f010      	BRLO _0x202002A
000206 332a      	CPI  R18,58
000207 f008      	BRLO _0x202002B
                 _0x202002A:
000208 c007      	RJMP _0x2020029
                 _0x202002B:
000209 e0aa      	LDI  R26,LOW(10)
00020a 9f5a      	MUL  R21,R26
00020b 2d50      	MOV  R21,R0
00020c 2fe2      	MOV  R30,R18
00020d 53e0      	SUBI R30,LOW(48)
00020e 0f5e      	ADD  R21,R30
00020f c0db      	RJMP _0x202001B
                 _0x2020029:
000210 2fe2      	MOV  R30,R18
000211 36e3      	CPI  R30,LOW(0x63)
000212 f449      	BRNE _0x202002F
000213 940e 0367 	CALL SUBOPT_0x5
000215 89e8      	LDD  R30,Y+16
000216 89f9      	LDD  R31,Y+16+1
000217 81a4      	LDD  R26,Z+4
000218 93aa      	ST   -Y,R26
000219 940e 036d 	CALL SUBOPT_0x6
00021b c0ce      	RJMP _0x2020030
                 _0x202002F:
00021c 37e3      	CPI  R30,LOW(0x73)
00021d f441      	BRNE _0x2020032
00021e 940e 0367 	CALL SUBOPT_0x5
000220 940e 0373 	CALL SUBOPT_0x7
000222 940e 0328 	CALL _strlen
000224 2f1e      	MOV  R17,R30
000225 c00a      	RJMP _0x2020033
                 _0x2020032:
000226 37e0      	CPI  R30,LOW(0x70)
000227 f461      	BRNE _0x2020035
000228 940e 0367 	CALL SUBOPT_0x5
00022a 940e 0373 	CALL SUBOPT_0x7
00022c 940e 0334 	CALL _strlenf
00022e 2f1e      	MOV  R17,R30
00022f 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000230 6002      	ORI  R16,LOW(2)
000231 770f      	ANDI R16,LOW(127)
000232 e030      	LDI  R19,LOW(0)
000233 c034      	RJMP _0x2020036
                 _0x2020035:
000234 36e4      	CPI  R30,LOW(0x64)
000235 f011      	BREQ _0x2020039
000236 36e9      	CPI  R30,LOW(0x69)
000237 f411      	BRNE _0x202003A
                 _0x2020039:
000238 6004      	ORI  R16,LOW(4)
000239 c002      	RJMP _0x202003B
                 _0x202003A:
00023a 37e5      	CPI  R30,LOW(0x75)
00023b f431      	BRNE _0x202003C
                 _0x202003B:
00023c e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00023d e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00023e 83ee      	STD  Y+6,R30
00023f 83ff      	STD  Y+6+1,R31
000240 e015      	LDI  R17,LOW(5)
000241 c00c      	RJMP _0x202003D
                 _0x202003C:
000242 35e8      	CPI  R30,LOW(0x58)
000243 f411      	BRNE _0x202003F
000244 6008      	ORI  R16,LOW(8)
000245 c003      	RJMP _0x2020040
                 _0x202003F:
000246 37e8      	CPI  R30,LOW(0x78)
000247 f009      	BREQ PC+2
000248 c0a1      	RJMP _0x2020071
                 _0x2020040:
000249 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00024a e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00024b 83ee      	STD  Y+6,R30
00024c 83ff      	STD  Y+6+1,R31
00024d e014      	LDI  R17,LOW(4)
                 _0x202003D:
00024e ff02      	SBRS R16,2
00024f c014      	RJMP _0x2020042
000250 940e 0367 	CALL SUBOPT_0x5
000252 940e 037d 	CALL SUBOPT_0x8
000254 85ab      	LDD  R26,Y+11
000255 23aa      	TST  R26
000256 f43a      	BRPL _0x2020043
000257 85ea      	LDD  R30,Y+10
000258 85fb      	LDD  R31,Y+10+1
000259 940e 03eb 	CALL __ANEGW1
00025b 87ea      	STD  Y+10,R30
00025c 87fb      	STD  Y+10+1,R31
00025d e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00025e 3040      	CPI  R20,0
00025f f011      	BREQ _0x2020044
000260 5f1f      	SUBI R17,-LOW(1)
000261 c001      	RJMP _0x2020045
                 _0x2020044:
000262 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000263 c004      	RJMP _0x2020046
                 _0x2020042:
000264 940e 0367 	CALL SUBOPT_0x5
000266 940e 037d 	CALL SUBOPT_0x8
                 _0x2020046:
                 _0x2020036:
000268 fd00      	SBRC R16,0
000269 c011      	RJMP _0x2020047
                 _0x2020048:
00026a 1715      	CP   R17,R21
00026b f478      	BRSH _0x202004A
00026c ff07      	SBRS R16,7
00026d c008      	RJMP _0x202004B
00026e ff02      	SBRS R16,2
00026f c004      	RJMP _0x202004C
000270 7f0b      	ANDI R16,LOW(251)
000271 2f24      	MOV  R18,R20
000272 5011      	SUBI R17,LOW(1)
000273 c001      	RJMP _0x202004D
                 _0x202004C:
000274 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000275 c001      	RJMP _0x202004E
                 _0x202004B:
000276 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000277 940e 0360 	CALL SUBOPT_0x4
000279 5051      	SUBI R21,LOW(1)
00027a cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00027b 2f31      	MOV  R19,R17
00027c ff01      	SBRS R16,1
00027d c017      	RJMP _0x202004F
                 _0x2020050:
00027e 3030      	CPI  R19,0
00027f f0a1      	BREQ _0x2020052
000280 ff03      	SBRS R16,3
000281 c006      	RJMP _0x2020053
000282 81ee      	LDD  R30,Y+6
000283 81ff      	LDD  R31,Y+6+1
000284 9125      	LPM  R18,Z+
000285 83ee      	STD  Y+6,R30
000286 83ff      	STD  Y+6+1,R31
000287 c005      	RJMP _0x2020054
                 _0x2020053:
000288 81ae      	LDD  R26,Y+6
000289 81bf      	LDD  R27,Y+6+1
00028a 912d      	LD   R18,X+
00028b 83ae      	STD  Y+6,R26
00028c 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00028d 940e 0360 	CALL SUBOPT_0x4
00028f 3050      	CPI  R21,0
000290 f009      	BREQ _0x2020055
000291 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000292 5031      	SUBI R19,LOW(1)
000293 cfea      	RJMP _0x2020050
                 _0x2020052:
000294 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000295 e320      	LDI  R18,LOW(48)
000296 81ee      	LDD  R30,Y+6
000297 81ff      	LDD  R31,Y+6+1
000298 940e 03f3 	CALL __GETW1PF
00029a 87e8      	STD  Y+8,R30
00029b 87f9      	STD  Y+8+1,R31
00029c 81ee      	LDD  R30,Y+6
00029d 81ff      	LDD  R31,Y+6+1
00029e 9632      	ADIW R30,2
00029f 83ee      	STD  Y+6,R30
0002a0 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002a1 85e8      	LDD  R30,Y+8
0002a2 85f9      	LDD  R31,Y+8+1
0002a3 85aa      	LDD  R26,Y+10
0002a4 85bb      	LDD  R27,Y+10+1
0002a5 17ae      	CP   R26,R30
0002a6 07bf      	CPC  R27,R31
0002a7 f050      	BRLO _0x202005C
0002a8 5f2f      	SUBI R18,-LOW(1)
0002a9 85a8      	LDD  R26,Y+8
0002aa 85b9      	LDD  R27,Y+8+1
0002ab 85ea      	LDD  R30,Y+10
0002ac 85fb      	LDD  R31,Y+10+1
0002ad 1bea      	SUB  R30,R26
0002ae 0bfb      	SBC  R31,R27
0002af 87ea      	STD  Y+10,R30
0002b0 87fb      	STD  Y+10+1,R31
0002b1 cfef      	RJMP _0x202005A
                 _0x202005C:
0002b2 332a      	CPI  R18,58
0002b3 f028      	BRLO _0x202005D
0002b4 ff03      	SBRS R16,3
0002b5 c002      	RJMP _0x202005E
0002b6 5f29      	SUBI R18,-LOW(7)
0002b7 c001      	RJMP _0x202005F
                 _0x202005E:
0002b8 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002b9 fd04      	SBRC R16,4
0002ba c01a      	RJMP _0x2020061
0002bb 3321      	CPI  R18,49
0002bc f420      	BRSH _0x2020063
0002bd 85a8      	LDD  R26,Y+8
0002be 85b9      	LDD  R27,Y+8+1
0002bf 9711      	SBIW R26,1
0002c0 f409      	BRNE _0x2020062
                 _0x2020063:
0002c1 c009      	RJMP _0x20200CD
                 _0x2020062:
0002c2 1753      	CP   R21,R19
0002c3 f010      	BRLO _0x2020067
0002c4 ff00      	SBRS R16,0
0002c5 c001      	RJMP _0x2020068
                 _0x2020067:
0002c6 c013      	RJMP _0x2020066
                 _0x2020068:
0002c7 e220      	LDI  R18,LOW(32)
0002c8 ff07      	SBRS R16,7
0002c9 c00b      	RJMP _0x2020069
0002ca e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002cb 6100      	ORI  R16,LOW(16)
0002cc ff02      	SBRS R16,2
0002cd c007      	RJMP _0x202006A
0002ce 7f0b      	ANDI R16,LOW(251)
0002cf 934a      	ST   -Y,R20
0002d0 940e 036d 	CALL SUBOPT_0x6
0002d2 3050      	CPI  R21,0
0002d3 f009      	BREQ _0x202006B
0002d4 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002d5 940e 0360 	CALL SUBOPT_0x4
0002d7 3050      	CPI  R21,0
0002d8 f009      	BREQ _0x202006C
0002d9 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002da 5031      	SUBI R19,LOW(1)
0002db 85a8      	LDD  R26,Y+8
0002dc 85b9      	LDD  R27,Y+8+1
0002dd 9712      	SBIW R26,2
0002de f008      	BRLO _0x2020059
0002df cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002e0 ff00      	SBRS R16,0
0002e1 c008      	RJMP _0x202006D
                 _0x202006E:
0002e2 3050      	CPI  R21,0
0002e3 f031      	BREQ _0x2020070
0002e4 5051      	SUBI R21,LOW(1)
0002e5 e2e0      	LDI  R30,LOW(32)
0002e6 93ea      	ST   -Y,R30
0002e7 940e 036d 	CALL SUBOPT_0x6
0002e9 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002ea e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002eb cee0      	RJMP _0x2020016
                 _0x2020018:
0002ec 85ac      	LDD  R26,Y+12
0002ed 85bd      	LDD  R27,Y+12+1
0002ee 940e 03ef 	CALL __GETW1P
0002f0 940e 0403 	CALL __LOADLOCR6
0002f2 9664      	ADIW R28,20
0002f3 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002f4 92ff      	PUSH R15
0002f5 2ef8      	MOV  R15,R24
0002f6 9726      	SBIW R28,6
0002f7 940e 03fe 	CALL __SAVELOCR4
0002f9 940e 0385 	CALL SUBOPT_0x9
0002fb 9730      	SBIW R30,0
0002fc f419      	BRNE _0x2020072
0002fd efef      	LDI  R30,LOW(65535)
0002fe efff      	LDI  R31,HIGH(65535)
0002ff c023      	RJMP _0x2080001
                 _0x2020072:
000300 01de      	MOVW R26,R28
000301 9616      	ADIW R26,6
000302 940e 03e7 	CALL __ADDW2R15
000304 018d      	MOVW R16,R26
000305 940e 0385 	CALL SUBOPT_0x9
000307 83ee      	STD  Y+6,R30
000308 83ff      	STD  Y+6+1,R31
000309 e0e0      	LDI  R30,LOW(0)
00030a 87e8      	STD  Y+8,R30
00030b 87e9      	STD  Y+8+1,R30
00030c 01de      	MOVW R26,R28
00030d 961a      	ADIW R26,10
00030e 940e 03e7 	CALL __ADDW2R15
000310 940e 03ef 	CALL __GETW1P
000312 93fa      	ST   -Y,R31
000313 93ea      	ST   -Y,R30
000314 931a      	ST   -Y,R17
000315 930a      	ST   -Y,R16
000316 e8e0      	LDI  R30,LOW(_put_buff_G101)
000317 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000318 93fa      	ST   -Y,R31
000319 93ea      	ST   -Y,R30
00031a 01de      	MOVW R26,R28
00031b 961a      	ADIW R26,10
00031c dea3      	RCALL __print_G101
00031d 019f      	MOVW R18,R30
00031e 81ae      	LDD  R26,Y+6
00031f 81bf      	LDD  R27,Y+6+1
000320 e0e0      	LDI  R30,LOW(0)
000321 93ec      	ST   X,R30
000322 01f9      	MOVW R30,R18
                 _0x2080001:
000323 940e 0405 	CALL __LOADLOCR4
000325 962a      	ADIW R28,10
000326 90ff      	POP  R15
000327 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000328 93ba      	ST   -Y,R27
000329 93aa      	ST   -Y,R26
00032a 91a9          ld   r26,y+
00032b 91b9          ld   r27,y+
00032c 27ee          clr  r30
00032d 27ff          clr  r31
                 strlen0:
00032e 916d          ld   r22,x+
00032f 2366          tst  r22
000330 f011          breq strlen1
000331 9631          adiw r30,1
000332 cffb          rjmp strlen0
                 strlen1:
000333 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000334 93ba      	ST   -Y,R27
000335 93aa      	ST   -Y,R26
000336 27aa          clr  r26
000337 27bb          clr  r27
000338 91e9          ld   r30,y+
000339 91f9          ld   r31,y+
                 strlenf0:
00033a 9005      	lpm  r0,z+
00033b 2000          tst  r0
00033c f011          breq strlenf1
00033d 9611          adiw r26,1
00033e cffb          rjmp strlenf0
                 strlenf1:
00033f 01fd          movw r30,r26
000340 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000269           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000341 940e 0391 	CALL _i2c_start
000343 eaa0      	LDI  R26,LOW(160)
000344 940e 03c5 	CALL _i2c_write
000346 2fa1      	MOV  R26,R17
000347 940e 03c5 	CALL _i2c_write
000349 2fa0      	MOV  R26,R16
00034a 940c 03c5 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
00034c e0e0      	LDI  R30,LOW(0)
00034d e0f0      	LDI  R31,HIGH(0)
00034e 93fa      	ST   -Y,R31
00034f 93ea      	ST   -Y,R30
000350 2fa1      	MOV  R26,R17
000351 940c 0074 	JMP  _memw
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000353 940e 0108 	CALL __lcd_write_data
000355 e0a3      	LDI  R26,LOW(3)
000356 e0b0      	LDI  R27,0
000357 940c 03dd 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000359 e3a0      	LDI  R26,LOW(48)
00035a 940e 00f4 	CALL __lcd_write_nibble_G100
                +
00035c e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00035d 958a     +DEC R24
00035e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00035f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
000360 932a      	ST   -Y,R18
000361 85ad      	LDD  R26,Y+13
000362 85be      	LDD  R27,Y+13+1
000363 85ef      	LDD  R30,Y+15
000364 89f8      	LDD  R31,Y+15+1
000365 9509      	ICALL
000366 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000367 89e8      	LDD  R30,Y+16
000368 89f9      	LDD  R31,Y+16+1
000369 9734      	SBIW R30,4
00036a 8be8      	STD  Y+16,R30
00036b 8bf9      	STD  Y+16+1,R31
00036c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
00036d 85ad      	LDD  R26,Y+13
00036e 85be      	LDD  R27,Y+13+1
00036f 85ef      	LDD  R30,Y+15
000370 89f8      	LDD  R31,Y+15+1
000371 9509      	ICALL
000372 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
000373 89a8      	LDD  R26,Y+16
000374 89b9      	LDD  R27,Y+16+1
000375 9614      	ADIW R26,4
000376 940e 03ef 	CALL __GETW1P
000378 83ee      	STD  Y+6,R30
000379 83ff      	STD  Y+6+1,R31
00037a 81ae      	LDD  R26,Y+6
00037b 81bf      	LDD  R27,Y+6+1
00037c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
00037d 89a8      	LDD  R26,Y+16
00037e 89b9      	LDD  R27,Y+16+1
00037f 9614      	ADIW R26,4
000380 940e 03ef 	CALL __GETW1P
000382 87ea      	STD  Y+10,R30
000383 87fb      	STD  Y+10+1,R31
000384 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000385 01de      	MOVW R26,R28
000386 961c      	ADIW R26,12
000387 940e 03e7 	CALL __ADDW2R15
000389 940e 03ef 	CALL __GETW1P
00038b 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x15 ;PORTC
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
00038c 98a8      	cbi  __i2c_port,__scl_bit
00038d 98a9      	cbi  __i2c_port,__sda_bit
00038e 9aa0      	sbi  __i2c_dir,__scl_bit
00038f 98a1      	cbi  __i2c_dir,__sda_bit
000390 c015      	rjmp __i2c_delay2
                 _i2c_start:
000391 98a1      	cbi  __i2c_dir,__sda_bit
000392 98a0      	cbi  __i2c_dir,__scl_bit
000393 27ee      	clr  r30
000394 0000      	nop
000395 9b99      	sbis __i2c_pin,__sda_bit
000396 9508      	ret
000397 9b98      	sbis __i2c_pin,__scl_bit
000398 9508      	ret
000399 d004      	rcall __i2c_delay1
00039a 9aa1      	sbi  __i2c_dir,__sda_bit
00039b d002      	rcall __i2c_delay1
00039c 9aa0      	sbi  __i2c_dir,__scl_bit
00039d e0e1      	ldi  r30,1
                 __i2c_delay1:
00039e e062      	ldi  r22,2
00039f c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0003a0 9aa1      	sbi  __i2c_dir,__sda_bit
0003a1 9aa0      	sbi  __i2c_dir,__scl_bit
0003a2 d003      	rcall __i2c_delay2
0003a3 98a0      	cbi  __i2c_dir,__scl_bit
0003a4 dff9      	rcall __i2c_delay1
0003a5 98a1      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0003a6 e063      	ldi  r22,3
                 __i2c_delay2l:
0003a7 956a      	dec  r22
0003a8 f7f1      	brne __i2c_delay2l
0003a9 9508      	ret
                 _i2c_read:
0003aa e078      	ldi  r23,8
                 __i2c_read0:
0003ab 98a0      	cbi  __i2c_dir,__scl_bit
0003ac dff1      	rcall __i2c_delay1
                 __i2c_read3:
0003ad 9b98      	sbis __i2c_pin,__scl_bit
0003ae cffe      	rjmp __i2c_read3
0003af dfee      	rcall __i2c_delay1
0003b0 9488      	clc
0003b1 9999      	sbic __i2c_pin,__sda_bit
0003b2 9408      	sec
0003b3 9aa0      	sbi  __i2c_dir,__scl_bit
0003b4 dff1      	rcall __i2c_delay2
0003b5 1fee      	rol  r30
0003b6 957a      	dec  r23
0003b7 f799      	brne __i2c_read0
0003b8 2f7a      	mov  r23,r26
0003b9 2377      	tst  r23
0003ba f411      	brne __i2c_read1
0003bb 98a1      	cbi  __i2c_dir,__sda_bit
0003bc c001      	rjmp __i2c_read2
                 __i2c_read1:
0003bd 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0003be dfdf      	rcall __i2c_delay1
0003bf 98a0      	cbi  __i2c_dir,__scl_bit
0003c0 dfe5      	rcall __i2c_delay2
0003c1 9aa0      	sbi  __i2c_dir,__scl_bit
0003c2 dfdb      	rcall __i2c_delay1
0003c3 98a1      	cbi  __i2c_dir,__sda_bit
0003c4 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0003c5 e078      	ldi  r23,8
                 __i2c_write0:
0003c6 0faa      	lsl  r26
0003c7 f410      	brcc __i2c_write1
0003c8 98a1      	cbi  __i2c_dir,__sda_bit
0003c9 c001      	rjmp __i2c_write2
                 __i2c_write1:
0003ca 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0003cb dfda      	rcall __i2c_delay2
0003cc 98a0      	cbi  __i2c_dir,__scl_bit
0003cd dfd0      	rcall __i2c_delay1
                 __i2c_write3:
0003ce 9b98      	sbis __i2c_pin,__scl_bit
0003cf cffe      	rjmp __i2c_write3
0003d0 dfcd      	rcall __i2c_delay1
0003d1 9aa0      	sbi  __i2c_dir,__scl_bit
0003d2 957a      	dec  r23
0003d3 f791      	brne __i2c_write0
0003d4 98a1      	cbi  __i2c_dir,__sda_bit
0003d5 dfc8      	rcall __i2c_delay1
0003d6 98a0      	cbi  __i2c_dir,__scl_bit
0003d7 dfce      	rcall __i2c_delay2
0003d8 e0e1      	ldi  r30,1
0003d9 9999      	sbic __i2c_pin,__sda_bit
0003da 27ee      	clr  r30
0003db 9aa0      	sbi  __i2c_dir,__scl_bit
0003dc cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
0003dd 9610      	adiw r26,0
0003de f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003df ef8a     +LDI R24 , LOW ( 0xFA )
0003e0 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0003e1 9701     +SBIW R24 , 1
0003e2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0003e3 95a8      	wdr
0003e4 9711      	sbiw r26,1
0003e5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003e6 9508      	ret
                 
                 __ADDW2R15:
0003e7 2400      	CLR  R0
0003e8 0daf      	ADD  R26,R15
0003e9 1db0      	ADC  R27,R0
0003ea 9508      	RET
                 
                 __ANEGW1:
0003eb 95f1      	NEG  R31
0003ec 95e1      	NEG  R30
0003ed 40f0      	SBCI R31,0
0003ee 9508      	RET
                 
                 __GETW1P:
0003ef 91ed      	LD   R30,X+
0003f0 91fc      	LD   R31,X
0003f1 9711      	SBIW R26,1
0003f2 9508      	RET
                 
                 __GETW1PF:
0003f3 9005      	LPM  R0,Z+
0003f4 91f4      	LPM  R31,Z
0003f5 2de0      	MOV  R30,R0
0003f6 9508      	RET
                 
                 __PUTPARD1:
0003f7 937a      	ST   -Y,R23
0003f8 936a      	ST   -Y,R22
0003f9 93fa      	ST   -Y,R31
0003fa 93ea      	ST   -Y,R30
0003fb 9508      	RET
                 
                 __SAVELOCR6:
0003fc 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003fd 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003fe 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003ff 932a      	ST   -Y,R18
                 __SAVELOCR2:
000400 931a      	ST   -Y,R17
000401 930a      	ST   -Y,R16
000402 9508      	RET
                 
                 __LOADLOCR6:
000403 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000404 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000405 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000406 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000407 8119      	LDD  R17,Y+1
000408 8108      	LD   R16,Y
000409 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   0 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  38 r17:  39 r18:  32 r19:  12 r20:   9 r21:  17 r22:   9 r23:   8 
r24:  23 r25:   3 r26: 117 r27:  46 r28:  18 r29:   1 r30: 159 r31:  60 
x  :  23 y  : 178 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   0 brmi  :   1 brne  :  34 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  69 
cbi   :  20 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   3 cpi   :  36 cpse  :   0 dec   :  10 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  26 ld    :  25 ldd   :  82 ldi   : 108 
lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  27 movw  :  17 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 or    :   1 
ori   :   7 out   :   8 pop   :   1 push  :   1 rcall :  36 ret   :  28 
reti  :   0 rjmp  :  71 rol   :   1 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :  16 sbic  :   4 sbis  :   6 sbiw  :  18 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  66 std   :  31 sts   :   2 sub   :   1 subi  :  18 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 60 out of 116 (51.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000814   2010     58   2068   32768   6.3%
[.dseg] 0x000060 0x00026d      0     13     13    2048   0.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
