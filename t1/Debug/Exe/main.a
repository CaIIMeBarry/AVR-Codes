;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <i2c.h>
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;
;
;#define COUNTER_EEPROM_ADDR 0
;
;void memw(unsigned int add, unsigned char data)
; 0000 000B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000C     unsigned char addh, addl;
; 0000 000D     addh = add >> 8;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	add -> Y+3
;	data -> Y+2
;	addh -> R17
;	addl -> R16
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 000E     addl = add;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 000F     i2c_start();
;PCODE: $00000016 VOL: 0
; 0000 0010     i2c_write(0xa0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0011     i2c_write(addh);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0012     i2c_write(addl);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0013     i2c_write(data);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0014     i2c_stop();
;PCODE: $0000001F VOL: 0
; 0000 0015     delay_ms(10);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0016 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;
;unsigned char memr(unsigned int add)
; 0000 001A {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001B     unsigned char addh, addl;
; 0000 001C     unsigned char data;
; 0000 001D     addh = add >> 8;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;	add -> Y+4
;	addh -> R17
;	addl -> R16
;	data -> R19
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 001E     addl = add;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 001F     i2c_start();
;PCODE: $00000032 VOL: 0
; 0000 0020     i2c_write(0xa0);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0021     i2c_write(addh);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0022     i2c_write(addl);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0023     delay_ms(5);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0024     i2c_start();
;PCODE: $0000003C VOL: 0
; 0000 0025     i2c_write(0xa1);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0026     data = i2c_read(0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0027     i2c_stop();
;PCODE: $00000042 VOL: 0
; 0000 0028     delay_ms(5);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0029     return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 002A }
;PCODE: $0000004A VOL: 0
;
;void main(void)
; 0000 002D {
;PCODE: $0000004B VOL: 0
; 0000 002E 
; 0000 002F     unsigned char counter;
; 0000 0030     //forcing the first LCD update
; 0000 0031     int old_counter = -1;
; 0000 0032     char lcd_buffer[17];
; 0000 0033     i2c_init();
;PCODE: $0000004C VOL: 0
;	counter -> R17
;	old_counter -> R18,R19
;	lcd_buffer -> Y+0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0034     lcd_init(16);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0035     counter = memr(COUNTER_EEPROM_ADDR);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0036 
; 0000 0037     if (counter > 100)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0038     {
; 0000 0039         counter = 0; // Default
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 003A     }
; 0000 003B 
; 0000 003C     lcd_clear();
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 003D     lcd_puts("Volume: ");
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003E     delay_ms(1500);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 003F 
; 0000 0040     while (1)
;PCODE: $00000062 VOL: 0
; 0000 0041     {
; 0000 0042 
; 0000 0043         if (PINB.5 == 0)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0044         {
; 0000 0045 
; 0000 0046             while (PINB.5 == 0);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0047 
; 0000 0048             if (counter < 100)
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0049             {
; 0000 004A                 counter++;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 004B                 memw(COUNTER_EEPROM_ADDR, counter);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 004C             }
; 0000 004D         }
;PCODE: $00000075 VOL: 0
; 0000 004E 
; 0000 004F 
; 0000 0050         if (PINB.7 == 0)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0051         {
; 0000 0052 
; 0000 0053             while (PINB.7 == 0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0054 
; 0000 0055             if (counter > 0)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0056             {
; 0000 0057                 counter--;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0058                 memw(COUNTER_EEPROM_ADDR, counter);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0059             }
; 0000 005A         }
;PCODE: $00000089 VOL: 0
; 0000 005B 
; 0000 005C         if (counter != old_counter)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 005D         {
; 0000 005E             sprintf(lcd_buffer, "Volume: %d   ", counter);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 005F 
; 0000 0060             lcd_clear();
;PCODE: $0000009C VOL: 0
; 0000 0061             lcd_gotoxy(0, 0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0062             lcd_puts(lcd_buffer);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0063             old_counter = counter;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0064         }
; 0000 0065 
; 0000 0066         delay_ms(20);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0067     }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0068 }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0

	.DSEG
_0x4:
	.BYTE 0x9
;
