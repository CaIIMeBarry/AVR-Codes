;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;void main(void)
; 0000 0005 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0006     const unsigned char scroll_sequence[] = {
; 0000 0007         ~0x00, ~0x00, ~0x00,  // BLANK, BLANK, BLANK
; 0000 0008         ~0x77,                // A
; 0000 0009         ~0x38,                // L
; 0000 000A         ~0x06,                // I
; 0000 000B         ~0x00, ~0x00, ~0x00, ~0x00 // Trailing BLANKs
; 0000 000C     };
; 0000 000D 
; 0000 000E     unsigned char i;
; 0000 000F     unsigned char persistence_loop;
; 0000 0010     unsigned char display_buffer[4];
; 0000 0011 
; 0000 0012     DDRA = 0xFF;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;	scroll_sequence -> Y+4
;	i -> R17
;	persistence_loop -> R16
;	display_buffer -> Y+0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0013     DDRC = 0xFF;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0014 
; 0000 0015     while (1)
;PCODE: $00000017 VOL: 0
; 0000 0016     {
; 0000 0017         // Loop through each starting position of our 4-digit "window"
; 0000 0018         for (i = 0; i < 7; i++)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0019         {
; 0000 001A             // Load the 4 patterns for the current frame into the buffer
; 0000 001B             display_buffer[0] = scroll_sequence[i];
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001C             display_buffer[1] = scroll_sequence[i + 1];
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 001D             display_buffer[2] = scroll_sequence[i + 2];
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 001E             display_buffer[3] = scroll_sequence[i + 3];
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 001F 
; 0000 0020 
; 0000 0021             // 25 cycles * (4 digits * 5ms) = 500ms
; 0000 0022             for (persistence_loop = 0; persistence_loop < 25; persistence_loop++)
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0023             {
; 0000 0024 
; 0000 0025                 PORTC = ~0x04;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0026                 PORTA = display_buffer[2];
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0027                 delay_ms(5);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0028 
; 0000 0029                 PORTC = ~0x08;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 002A                 PORTA = display_buffer[1];
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 002B                 delay_ms(5);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 002C 
; 0000 002D                 PORTC = ~0x16;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 002E                 PORTA = display_buffer[0];
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 002F                 delay_ms(5);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0030 
; 0000 0031                 PORTC = ~0x32;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0032                 PORTA = display_buffer[3];
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0033                 delay_ms(5);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0034             }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0035         }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0036     }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0037 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
