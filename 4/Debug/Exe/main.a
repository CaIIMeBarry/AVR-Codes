;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdio.h>
;
;void main(void)
; 0000 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0008     // Set the target time here (minutes and seconds)
; 0000 0009     int target_minutes = 0;
; 0000 000A     int target_seconds = 8;
; 0000 000B     int target_total_seconds = target_minutes * 60 + target_seconds;
; 0000 000C     int current_minutes = 0;
; 0000 000D     int current_seconds = 0;
; 0000 000E     int current_total_seconds = 0;
; 0000 000F     char line1[17];
; 0000 0010     char line2[17];
; 0000 0011     int buzzer_active = 0;
; 0000 0012     int buzzer_counter = 0;
; 0000 0013     lcd_init(16);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;	target_minutes -> R16,R17
;	target_seconds -> R18,R19
;	target_total_seconds -> R20,R21
;	current_minutes -> Y+42
;	current_seconds -> Y+40
;	current_total_seconds -> Y+38
;	line1 -> Y+21
;	line2 -> Y+4
;	buzzer_active -> Y+2
;	buzzer_counter -> Y+0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0014     DDRA |= (1 << 3);  // bit or
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0015     lcd_clear();
;PCODE: $00000020 VOL: 0
; 0000 0016     while (1)
;PCODE: $00000021 VOL: 0
; 0000 0017     {
; 0000 0018         if (!buzzer_active)
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0019         {
; 0000 001A             // Normal timer operation - counting up from 00:00
; 0000 001B             sprintf(line1, " %02d:%02d ", current_minutes, current_seconds);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001C             sprintf(line2, "  %02d:%02d  ", target_minutes, target_seconds);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 001D             lcd_gotoxy(5, 0);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 001E             lcd_puts(line1);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 001F             lcd_gotoxy(4, 1);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0020             lcd_puts(line2);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0021             delay_ms(100);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0022             current_seconds++;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0023 
; 0000 0024             if (current_seconds >= 60)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0025             {
; 0000 0026                 current_seconds = 0;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0027                 current_minutes++;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0028             }
; 0000 0029             current_total_seconds = current_minutes * 60 + current_seconds;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 002A 
; 0000 002B             if (current_total_seconds == target_total_seconds)
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 002C             {
; 0000 002D                 buzzer_active = 1;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 002E                 buzzer_counter = 0;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 002F                 PORTA |= (1 << 3);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0030             }
; 0000 0031         }
;PCODE: $0000006D VOL: 0
; 0000 0032         else
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0033         {
; 0000 0034             // Buzzer is active for
; 0000 0035             delay_ms(100);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0036             buzzer_counter++;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0037 
; 0000 0038             if (buzzer_counter >= 10)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0039             {
; 0000 003A                 PORTA &= ~(1 << 3); // Turn off buzzer
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 003B                 buzzer_active = 0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 003C                 buzzer_counter = 0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 003D                 current_minutes = 0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 003E                 current_seconds = 0;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 003F                 current_total_seconds = 0;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0040             }
; 0000 0041         }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0042     }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0043 }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
