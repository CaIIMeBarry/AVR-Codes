
AVRASM ver. 2.1.30  C:\Users\Bardia\Desktop\HW5\5\Debug\List\clock.asm Thu Jul 31 13:49:13 2025

C:\Users\Bardia\Desktop\HW5\5\Debug\List\clock.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Bardia\Desktop\HW5\5\Debug\List\clock.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Bardia\Desktop\HW5\5\Debug\List\clock.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0048 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 3025
000034 7532
000035 253a
000036 3230      	.DB  0x25,0x30,0x32,0x75,0x3A,0x25,0x30,0x32
000037 3a75
000038 3025
000039 7532
00003a 4100      	.DB  0x75,0x3A,0x25,0x30,0x32,0x75,0x0,0x41
00003b 253a
00003c 3230
00003d 3a75
00003e 3025      	.DB  0x3A,0x25,0x30,0x32,0x75,0x3A,0x25,0x30
00003f 7532
000040 253a
000041 3230
000042 0075      	.DB  0x32,0x75,0x3A,0x25,0x30,0x32,0x75,0x0
                 _0x2000003:
000043 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000044 0002      	.DW  0x02
000045 0260      	.DW  __base_y_G100
000046 0086      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000047 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000048 94f8      	CLI
000049 27ee      	CLR  R30
00004a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004b e0f1      	LDI  R31,1
00004c bffb      	OUT  GICR,R31
00004d bfeb      	OUT  GICR,R30
00004e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004f e08d      	LDI  R24,(14-2)+1
000050 e0a2      	LDI  R26,2
000051 27bb      	CLR  R27
                 __CLEAR_REG:
000052 93ed      	ST   X+,R30
000053 958a      	DEC  R24
000054 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000055 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000056 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000057 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000058 93ed      	ST   X+,R30
000059 9701      	SBIW R24,1
00005a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005b e8e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005d 9185      	LPM  R24,Z+
00005e 9195      	LPM  R25,Z+
00005f 9700      	SBIW R24,0
000060 f061      	BREQ __GLOBAL_INI_END
000061 91a5      	LPM  R26,Z+
000062 91b5      	LPM  R27,Z+
000063 9005      	LPM  R0,Z+
000064 9015      	LPM  R1,Z+
000065 01bf      	MOVW R22,R30
000066 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000067 9005      	LPM  R0,Z+
000068 920d      	ST   X+,R0
000069 9701      	SBIW R24,1
00006a f7e1      	BRNE __GLOBAL_INI_LOOP
00006b 01fb      	MOVW R30,R22
00006c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006e bfed      	OUT  SPL,R30
00006f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000070 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000071 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000072 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000073 940c 0075 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;void main(void)
                 ; 0000 0008 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0009     unsigned char sec=0, min=0, hr=0;
                 ; 0000 000A     unsigned char ah=0, am=0, as=0;
                 ; 0000 000B     unsigned char cursorX=2, cursorY=1; // columns 2..9 for alarm digits
                 ; 0000 000C     unsigned int tickCount = 0;
                 ; 0000 000D 
                 ; 0000 000E     DDRD |= (1<<7);
000075 9724      	SBIW R28,4
000076 e0e0      	LDI  R30,LOW(0)
000077 83e8      	ST   Y,R30
000078 83e9      	STD  Y+1,R30
000079 e0e1      	LDI  R30,LOW(1)
00007a 83ea      	STD  Y+2,R30
00007b e0e2      	LDI  R30,LOW(2)
00007c 83eb      	STD  Y+3,R30
                 ;	sec -> R17
                 ;	min -> R16
                 ;	hr -> R19
                 ;	ah -> R18
                 ;	am -> R21
                 ;	as -> R20
                 ;	cursorX -> Y+3
                 ;	cursorY -> Y+2
                 ;	tickCount -> Y+0
00007d e010      	LDI  R17,0
00007e e000      	LDI  R16,0
00007f e030      	LDI  R19,0
000080 e020      	LDI  R18,0
000081 e050      	LDI  R21,0
000082 e040      	LDI  R20,0
000083 9a8f      	SBI  0x11,7
                 ; 0000 000F     DDRD &= ~((1<<2)|(1<<3));
000084 b3e1      	IN   R30,0x11
000085 7fe3      	ANDI R30,LOW(0xF3)
000086 bbe1      	OUT  0x11,R30
                 ; 0000 0010     PORTD |= (1<<2)|(1<<3);
000087 b3e2      	IN   R30,0x12
000088 60ec      	ORI  R30,LOW(0xC)
000089 bbe2      	OUT  0x12,R30
                 ; 0000 0011 
                 ; 0000 0012     lcd_init(16);
00008a e1a0      	LDI  R26,LOW(16)
00008b d15c      	RCALL _lcd_init
                 ; 0000 0013     lcd_clear();
00008c d129      	RCALL _lcd_clear
                 ; 0000 0014 
                 ; 0000 0015     while(1)
                 _0x3:
                 ; 0000 0016     {
                 ; 0000 0017         char buf[17];
                 ; 0000 0018 
                 ; 0000 0019         lcd_gotoxy(0,0);
00008d 9761      	SBIW R28,17
                 ;	cursorX -> Y+20
                 ;	cursorY -> Y+19
                 ;	tickCount -> Y+17
                 ;	buf -> Y+0
00008e e0e0      	LDI  R30,LOW(0)
00008f 93ea      	ST   -Y,R30
000090 e0a0      	LDI  R26,LOW(0)
000091 940e 03d6 	CALL SUBOPT_0x0
                 ; 0000 001A         sprintf(buf, "%02u:%02u:%02u", hr, min, sec);
                +
000093 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000094 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000095 93fa      	ST   -Y,R31
000096 93ea      	ST   -Y,R30
000097 2fe3      	MOV  R30,R19
000098 940e 03dc 	CALL SUBOPT_0x1
00009a 2fe0      	MOV  R30,R16
00009b 940e 03dc 	CALL SUBOPT_0x1
00009d 2fe1      	MOV  R30,R17
00009e 940e 03dc 	CALL SUBOPT_0x1
0000a0 940e 03e2 	CALL SUBOPT_0x2
                 ; 0000 001B         lcd_puts(buf);
                 ; 0000 001C         lcd_gotoxy(0,1);
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 93ea      	ST   -Y,R30
0000a4 e0a1      	LDI  R26,LOW(1)
0000a5 940e 03d6 	CALL SUBOPT_0x0
                 ; 0000 001D         sprintf(buf, "A:%02u:%02u:%02u", ah, am, as);
                +
0000a7 e7e5     +LDI R30 , LOW ( 2 * _0x0 + ( 15 ) )
0000a8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW1FN _0x0,15
0000a9 93fa      	ST   -Y,R31
0000aa 93ea      	ST   -Y,R30
0000ab 2fe2      	MOV  R30,R18
0000ac 940e 03dc 	CALL SUBOPT_0x1
0000ae 2fe5      	MOV  R30,R21
0000af 940e 03dc 	CALL SUBOPT_0x1
0000b1 2fe4      	MOV  R30,R20
0000b2 940e 03dc 	CALL SUBOPT_0x1
0000b4 940e 03e2 	CALL SUBOPT_0x2
                 ; 0000 001E         lcd_puts(buf);
                 ; 0000 001F         lcd_gotoxy(cursorX, cursorY);
0000b6 89ec      	LDD  R30,Y+20
0000b7 93ea      	ST   -Y,R30
0000b8 89ac      	LDD  R26,Y+20
0000b9 d0ef      	RCALL _lcd_gotoxy
                 ; 0000 0020         _lcd_write_data(0x0F);
0000ba e0af      	LDI  R26,LOW(15)
0000bb d0e1      	RCALL __lcd_write_data
                 ; 0000 0021 
                 ; 0000 0022         for (tickCount = 0; tickCount < 50; tickCount++) {
0000bc e0e0      	LDI  R30,LOW(0)
0000bd 8be9      	STD  Y+17,R30
0000be 8bea      	STD  Y+17+1,R30
                 _0x7:
0000bf 89a9      	LDD  R26,Y+17
0000c0 89ba      	LDD  R27,Y+17+1
0000c1 97d2      	SBIW R26,50
0000c2 f008      	BRLO PC+2
0000c3 c0ac      	RJMP _0x8
                 ; 0000 0023 
                 ; 0000 0024             if (PINB.0 == 0)
0000c4 99b0      	SBIC 0x16,0
0000c5 c00a      	RJMP _0x9
                 ; 0000 0025             {
                 ; 0000 0026 
                 ; 0000 0027                     cursorX++;
0000c6 89ec      	LDD  R30,Y+20
0000c7 5fef      	SUBI R30,-LOW(1)
0000c8 8bec      	STD  Y+20,R30
                 ; 0000 0028                     if (cursorX > 9) cursorX = 2;
0000c9 89ac      	LDD  R26,Y+20
0000ca 30aa      	CPI  R26,LOW(0xA)
0000cb f010      	BRLO _0xA
0000cc e0e2      	LDI  R30,LOW(2)
0000cd 8bec      	STD  Y+20,R30
                 ; 0000 0029                     while (PINB.0 == 0); // wait release
                 _0xA:
                 _0xB:
0000ce 9bb0      	SBIS 0x16,0
0000cf cffe      	RJMP _0xB
                 ; 0000 002A 
                 ; 0000 002B             }
                 ; 0000 002C             // PD3: inc
                 ; 0000 002D             if (PIND.3 == 0) {
                 _0x9:
0000d0 9983      	SBIC 0x10,3
0000d1 c049      	RJMP _0xE
                 ; 0000 002E 
                 ; 0000 002F 
                 ; 0000 0030                     if (cursorX == 2) {
0000d2 89ac      	LDD  R26,Y+20
0000d3 30a2      	CPI  R26,LOW(0x2)
0000d4 f431      	BRNE _0xF
                 ; 0000 0031                         unsigned char tens = ah / 10;
                 ; 0000 0032                         ah = ((tens + 1) % 3) * 10 + (ah % 10);
0000d5 940e 03e9 	CALL SUBOPT_0x3
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	tens -> Y+0
0000d7 9631      	ADIW R30,1
0000d8 940e 03f3 	CALL SUBOPT_0x4
                 ; 0000 0033                     } else if (cursorX == 3) {
0000da c039      	RJMP _0x3A
                 _0xF:
0000db 89ac      	LDD  R26,Y+20
0000dc 30a3      	CPI  R26,LOW(0x3)
0000dd f449      	BRNE _0x11
                 ; 0000 0034                         unsigned char units = (ah % 10 + 1) % 10;
                 ; 0000 0035                         ah = (ah/10)*10 + units;
0000de 940e 0404 	CALL SUBOPT_0x5
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	units -> Y+0
0000e0 940e 040c 	CALL SUBOPT_0x6
0000e2 940e 0414 	CALL SUBOPT_0x7
                 ; 0000 0036                         if (ah >= 24) ah -= 10;
0000e4 f008      	BRLO _0x12
0000e5 502a      	SUBI R18,LOW(10)
                 ; 0000 0037                     } else if (cursorX == 5) {
                 _0x12:
0000e6 c02d      	RJMP _0x3A
                 _0x11:
0000e7 89ac      	LDD  R26,Y+20
0000e8 30a5      	CPI  R26,LOW(0x5)
0000e9 f449      	BRNE _0x14
                 ; 0000 0038                         unsigned char tens = am / 10;
                 ; 0000 0039                         am = ((tens + 1) % 6) * 10 + (am % 10);
0000ea 940e 0422 	CALL SUBOPT_0x8
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	tens -> Y+0
0000ec 940e 042c 	CALL SUBOPT_0x9
0000ee 940e 0436 	CALL SUBOPT_0xA
0000f0 0fe6      	ADD  R30,R22
0000f1 2f5e      	MOV  R21,R30
                 ; 0000 003A                     } else if (cursorX == 6) {
0000f2 c021      	RJMP _0x3A
                 _0x14:
0000f3 89ac      	LDD  R26,Y+20
0000f4 30a6      	CPI  R26,LOW(0x6)
0000f5 f441      	BRNE _0x16
                 ; 0000 003B                         unsigned char units = (am % 10 + 1) % 10;
                 ; 0000 003C                         am = (am/10)*10 + units;
0000f6 9721      	SBIW R28,1
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	units -> Y+0
0000f7 940e 0436 	CALL SUBOPT_0xA
0000f9 940e 040c 	CALL SUBOPT_0x6
0000fb 940e 043d 	CALL SUBOPT_0xB
                 ; 0000 003D                     } else if (cursorX == 8) {
0000fd c016      	RJMP _0x3A
                 _0x16:
0000fe 89ac      	LDD  R26,Y+20
0000ff 30a8      	CPI  R26,LOW(0x8)
000100 f441      	BRNE _0x18
                 ; 0000 003E                         unsigned char tens = as / 10;
                 ; 0000 003F                         as = ((tens + 1) % 6) * 10 + (as % 10);
000101 940e 044a 	CALL SUBOPT_0xC
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	tens -> Y+0
000103 940e 042c 	CALL SUBOPT_0x9
000105 940e 0454 	CALL SUBOPT_0xD
000107 0fe6      	ADD  R30,R22
000108 c00a      	RJMP _0x3B
                 ; 0000 0040                     } else if (cursorX == 9) {
                 _0x18:
000109 89ac      	LDD  R26,Y+20
00010a 30a9      	CPI  R26,LOW(0x9)
00010b f449      	BRNE _0x1A
                 ; 0000 0041                         unsigned char units = (as % 10 + 1) % 10;
                 ; 0000 0042                         as = (as/10)*10 + units;
00010c 9721      	SBIW R28,1
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	units -> Y+0
00010d 940e 0454 	CALL SUBOPT_0xD
00010f 940e 040c 	CALL SUBOPT_0x6
000111 940e 045b 	CALL SUBOPT_0xE
                 _0x3B:
000113 2f4e      	MOV  R20,R30
                 ; 0000 0043                     }
                 _0x3A:
000114 9621      	ADIW R28,1
                 ; 0000 0044                     while (PIND.3 == 0);
                 _0x1A:
                 _0x1B:
000115 9b83      	SBIS 0x10,3
000116 cffe      	RJMP _0x1B
                 ; 0000 0045                     delay_ms(50);
000117 e3a2      	LDI  R26,LOW(50)
000118 e0b0      	LDI  R27,0
000119 940e 04b2 	CALL _delay_ms
                 ; 0000 0046 
                 ; 0000 0047             }
                 ; 0000 0048             // PD2: dec
                 ; 0000 0049             if (PIND.2 == 0) {
                 _0xE:
00011b 9982      	SBIC 0x10,2
00011c c049      	RJMP _0x1E
                 ; 0000 004A 
                 ; 0000 004B 
                 ; 0000 004C                     if (cursorX == 2) {
00011d 89ac      	LDD  R26,Y+20
00011e 30a2      	CPI  R26,LOW(0x2)
00011f f431      	BRNE _0x1F
                 ; 0000 004D                         unsigned char tens = ah / 10;
                 ; 0000 004E                         ah = ((tens + 2) % 3) * 10 + (ah % 10);
000120 940e 03e9 	CALL SUBOPT_0x3
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	tens -> Y+0
000122 9632      	ADIW R30,2
000123 940e 03f3 	CALL SUBOPT_0x4
                 ; 0000 004F                     } else if (cursorX == 3) {
000125 c039      	RJMP _0x3C
                 _0x1F:
000126 89ac      	LDD  R26,Y+20
000127 30a3      	CPI  R26,LOW(0x3)
000128 f449      	BRNE _0x21
                 ; 0000 0050                         unsigned char units = (ah % 10 + 9) % 10;
                 ; 0000 0051                         ah = (ah/10)*10 + units;
000129 940e 0404 	CALL SUBOPT_0x5
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	units -> Y+0
00012b 940e 0467 	CALL SUBOPT_0xF
00012d 940e 0414 	CALL SUBOPT_0x7
                 ; 0000 0052                         if (ah >= 24) ah += 10;
00012f f008      	BRLO _0x22
000130 5f26      	SUBI R18,-LOW(10)
                 ; 0000 0053                     } else if (cursorX == 5) {
                 _0x22:
000131 c02d      	RJMP _0x3C
                 _0x21:
000132 89ac      	LDD  R26,Y+20
000133 30a5      	CPI  R26,LOW(0x5)
000134 f449      	BRNE _0x24
                 ; 0000 0054                         unsigned char tens = am / 10;
                 ; 0000 0055                         am = ((tens + 5) % 6) * 10 + (am % 10);
000135 940e 0422 	CALL SUBOPT_0x8
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	tens -> Y+0
000137 940e 046f 	CALL SUBOPT_0x10
000139 940e 0436 	CALL SUBOPT_0xA
00013b 0fe6      	ADD  R30,R22
00013c 2f5e      	MOV  R21,R30
                 ; 0000 0056                     } else if (cursorX == 6) {
00013d c021      	RJMP _0x3C
                 _0x24:
00013e 89ac      	LDD  R26,Y+20
00013f 30a6      	CPI  R26,LOW(0x6)
000140 f441      	BRNE _0x26
                 ; 0000 0057                         unsigned char units = (am % 10 + 9) % 10;
                 ; 0000 0058                         am = (am/10)*10 + units;
000141 9721      	SBIW R28,1
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	units -> Y+0
000142 940e 0436 	CALL SUBOPT_0xA
000144 940e 0467 	CALL SUBOPT_0xF
000146 940e 043d 	CALL SUBOPT_0xB
                 ; 0000 0059                     } else if (cursorX == 8) {
000148 c016      	RJMP _0x3C
                 _0x26:
000149 89ac      	LDD  R26,Y+20
00014a 30a8      	CPI  R26,LOW(0x8)
00014b f441      	BRNE _0x28
                 ; 0000 005A                         unsigned char tens = as / 10;
                 ; 0000 005B                         as = ((tens + 5) % 6) * 10 + (as % 10);
00014c 940e 044a 	CALL SUBOPT_0xC
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	tens -> Y+0
00014e 940e 046f 	CALL SUBOPT_0x10
000150 940e 0454 	CALL SUBOPT_0xD
000152 0fe6      	ADD  R30,R22
000153 c00a      	RJMP _0x3D
                 ; 0000 005C                     } else if (cursorX == 9) {
                 _0x28:
000154 89ac      	LDD  R26,Y+20
000155 30a9      	CPI  R26,LOW(0x9)
000156 f449      	BRNE _0x2A
                 ; 0000 005D                         unsigned char units = (as % 10 + 9) % 10;
                 ; 0000 005E                         as = (as/10)*10 + units;
000157 9721      	SBIW R28,1
                 ;	cursorX -> Y+21
                 ;	cursorY -> Y+20
                 ;	tickCount -> Y+18
                 ;	buf -> Y+1
                 ;	units -> Y+0
000158 940e 0454 	CALL SUBOPT_0xD
00015a 940e 0467 	CALL SUBOPT_0xF
00015c 940e 045b 	CALL SUBOPT_0xE
                 _0x3D:
00015e 2f4e      	MOV  R20,R30
                 ; 0000 005F                     }
                 _0x3C:
00015f 9621      	ADIW R28,1
                 ; 0000 0060                     while (PIND.2 == 0);
                 _0x2A:
                 _0x2B:
000160 9b82      	SBIS 0x10,2
000161 cffe      	RJMP _0x2B
                 ; 0000 0061                     delay_ms(50);
000162 e3a2      	LDI  R26,LOW(50)
000163 e0b0      	LDI  R27,0
000164 940e 04b2 	CALL _delay_ms
                 ; 0000 0062 
                 ; 0000 0063             }
                 ; 0000 0064             delay_ms(20);
                 _0x1E:
000166 e1a4      	LDI  R26,LOW(20)
000167 e0b0      	LDI  R27,0
000168 940e 04b2 	CALL _delay_ms
                 ; 0000 0065         }
00016a 89e9      	LDD  R30,Y+17
00016b 89fa      	LDD  R31,Y+17+1
00016c 9631      	ADIW R30,1
00016d 8be9      	STD  Y+17,R30
00016e 8bfa      	STD  Y+17+1,R31
00016f cf4f      	RJMP _0x7
                 _0x8:
                 ; 0000 0066         //update clock
                 ; 0000 0067         sec++;
000170 5f1f      	SUBI R17,-1
                 ; 0000 0068         if (sec >= 60) { sec = 0; min++; }
000171 331c      	CPI  R17,60
000172 f010      	BRLO _0x2E
000173 e010      	LDI  R17,LOW(0)
000174 5f0f      	SUBI R16,-1
                 ; 0000 0069         if (min >= 60) { min = 0; hr++; }
                 _0x2E:
000175 330c      	CPI  R16,60
000176 f010      	BRLO _0x2F
000177 e000      	LDI  R16,LOW(0)
000178 5f3f      	SUBI R19,-1
                 ; 0000 006A         if (hr >= 24) { hr = 0; }
                 _0x2F:
000179 3138      	CPI  R19,24
00017a f008      	BRLO _0x30
00017b e030      	LDI  R19,LOW(0)
                 ; 0000 006B 
                 ; 0000 006C         if (hr == ah && min == am && sec == as) PORTD.7=1;
                 _0x30:
00017c 1723      	CP   R18,R19
00017d f421      	BRNE _0x32
00017e 1750      	CP   R21,R16
00017f f411      	BRNE _0x32
000180 1741      	CP   R20,R17
000181 f009      	BREQ _0x33
                 _0x32:
000182 c002      	RJMP _0x31
                 _0x33:
000183 9a97      	SBI  0x12,7
                 ; 0000 006D         else PORTD.7=0 ;
000184 c001      	RJMP _0x36
                 _0x31:
000185 9897      	CBI  0x12,7
                 ; 0000 006E     }
                 _0x36:
000186 9661      	ADIW R28,17
000187 cf05      	RJMP _0x3
                 ; 0000 006F 
                 ; 0000 0070 }
                 _0x39:
000188 cfff      	RJMP _0x39
                 ; .FEND
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000189 93aa      	ST   -Y,R26
00018a b3eb      	IN   R30,0x1B
00018b 70ef      	ANDI R30,LOW(0xF)
00018c 2fae      	MOV  R26,R30
00018d 81e8      	LD   R30,Y
00018e 7fe0      	ANDI R30,LOW(0xF0)
00018f 2bea      	OR   R30,R26
000190 bbeb      	OUT  0x1B,R30
                +
000191 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000192 958a     +DEC R24
000193 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000194 9ada      	SBI  0x1B,2
                +
000195 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000196 958a     +DEC R24
000197 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000198 98da      	CBI  0x1B,2
                +
000199 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00019a 958a     +DEC R24
00019b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00019c c076      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00019d 93aa      	ST   -Y,R26
00019e 81a8      	LD   R26,Y
00019f dfe9      	RCALL __lcd_write_nibble_G100
0001a0 81e8          ld    r30,y
0001a1 95e2          swap  r30
0001a2 83e8          st    y,r30
0001a3 81a8      	LD   R26,Y
0001a4 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001a5 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001a6 958a     +DEC R24
0001a7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001a8 c06a      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001a9 93aa      	ST   -Y,R26
0001aa 81e8      	LD   R30,Y
0001ab e0f0      	LDI  R31,0
0001ac 5ae0      	SUBI R30,LOW(-__base_y_G100)
0001ad 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001ae 81e0      	LD   R30,Z
0001af 81a9      	LDD  R26,Y+1
0001b0 0fae      	ADD  R26,R30
0001b1 dfeb      	RCALL __lcd_write_data
0001b2 8059      	LDD  R5,Y+1
0001b3 8048      	LDD  R4,Y+0
0001b4 9622      	ADIW R28,2
0001b5 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001b6 e0a2      	LDI  R26,LOW(2)
0001b7 940e 0479 	CALL SUBOPT_0x11
0001b9 e0ac      	LDI  R26,LOW(12)
0001ba dfe2      	RCALL __lcd_write_data
0001bb e0a1      	LDI  R26,LOW(1)
0001bc 940e 0479 	CALL SUBOPT_0x11
0001be e0e0      	LDI  R30,LOW(0)
0001bf 2e4e      	MOV  R4,R30
0001c0 2e5e      	MOV  R5,R30
0001c1 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001c2 93aa      	ST   -Y,R26
0001c3 81a8      	LD   R26,Y
0001c4 30aa      	CPI  R26,LOW(0xA)
0001c5 f011      	BREQ _0x2000005
0001c6 1457      	CP   R5,R7
0001c7 f048      	BRLO _0x2000004
                 _0x2000005:
0001c8 e0e0      	LDI  R30,LOW(0)
0001c9 93ea      	ST   -Y,R30
0001ca 9443      	INC  R4
0001cb 2da4      	MOV  R26,R4
0001cc dfdc      	RCALL _lcd_gotoxy
0001cd 81a8      	LD   R26,Y
0001ce 30aa      	CPI  R26,LOW(0xA)
0001cf f409      	BRNE _0x2000007
0001d0 c042      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0001d1 9453      	INC  R5
0001d2 9ad8      	SBI  0x1B,0
0001d3 81a8      	LD   R26,Y
0001d4 dfc8      	RCALL __lcd_write_data
0001d5 98d8      	CBI  0x1B,0
0001d6 c03c      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001d7 93ba      	ST   -Y,R27
0001d8 93aa      	ST   -Y,R26
0001d9 931a      	ST   -Y,R17
                 _0x2000008:
0001da 81a9      	LDD  R26,Y+1
0001db 81ba      	LDD  R27,Y+1+1
0001dc 91ed      	LD   R30,X+
0001dd 83a9      	STD  Y+1,R26
0001de 83ba      	STD  Y+1+1,R27
0001df 2f1e      	MOV  R17,R30
0001e0 30e0      	CPI  R30,0
0001e1 f019      	BREQ _0x200000A
0001e2 2fa1      	MOV  R26,R17
0001e3 dfde      	RCALL _lcd_putchar
0001e4 cff5      	RJMP _0x2000008
                 _0x200000A:
0001e5 8118      	LDD  R17,Y+0
0001e6 9623      	ADIW R28,3
0001e7 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001e8 93aa      	ST   -Y,R26
0001e9 b3ea      	IN   R30,0x1A
0001ea 6fe0      	ORI  R30,LOW(0xF0)
0001eb bbea      	OUT  0x1A,R30
0001ec 9ad2      	SBI  0x1A,2
0001ed 9ad0      	SBI  0x1A,0
0001ee 9ad1      	SBI  0x1A,1
0001ef 98da      	CBI  0x1B,2
0001f0 98d8      	CBI  0x1B,0
0001f1 98d9      	CBI  0x1B,1
0001f2 8078      	LDD  R7,Y+0
0001f3 81e8      	LD   R30,Y
0001f4 58e0      	SUBI R30,-LOW(128)
                +
0001f5 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001f7 81e8      	LD   R30,Y
0001f8 54e0      	SUBI R30,-LOW(192)
                +
0001f9 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001fb e1a4      	LDI  R26,LOW(20)
0001fc e0b0      	LDI  R27,0
0001fd 940e 04b2 	CALL _delay_ms
0001ff 940e 047f 	CALL SUBOPT_0x12
000201 940e 047f 	CALL SUBOPT_0x12
000203 940e 047f 	CALL SUBOPT_0x12
000205 e2a0      	LDI  R26,LOW(32)
000206 df82      	RCALL __lcd_write_nibble_G100
                +
000207 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000208 958a     +DEC R24
000209 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00020a e2a8      	LDI  R26,LOW(40)
00020b df91      	RCALL __lcd_write_data
00020c e0a4      	LDI  R26,LOW(4)
00020d df8f      	RCALL __lcd_write_data
00020e e8a5      	LDI  R26,LOW(133)
00020f df8d      	RCALL __lcd_write_data
000210 e0a6      	LDI  R26,LOW(6)
000211 df8b      	RCALL __lcd_write_data
000212 dfa3      	RCALL _lcd_clear
                 _0x2080002:
000213 9621      	ADIW R28,1
000214 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000215 93ba      	ST   -Y,R27
000216 93aa      	ST   -Y,R26
000217 931a      	ST   -Y,R17
000218 930a      	ST   -Y,R16
000219 81aa      	LDD  R26,Y+2
00021a 81bb      	LDD  R27,Y+2+1
00021b 9612      	ADIW R26,2
00021c 940e 04f8 	CALL __GETW1P
00021e 9730      	SBIW R30,0
00021f f159      	BREQ _0x2020010
000220 81aa      	LDD  R26,Y+2
000221 81bb      	LDD  R27,Y+2+1
000222 9614      	ADIW R26,4
000223 940e 04f8 	CALL __GETW1P
000225 018f      	MOVW R16,R30
000226 9730      	SBIW R30,0
000227 f061      	BREQ _0x2020012
                +
000228 3002     +CPI R16 , LOW ( 2 )
000229 e0e0     +LDI R30 , HIGH ( 2 )
00022a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00022b f098      	BRLO _0x2020013
00022c 01f8      	MOVW R30,R16
00022d 9731      	SBIW R30,1
00022e 018f      	MOVW R16,R30
                +
00022f 81aa     +LDD R26 , Y + 2
000230 81bb     +LDD R27 , Y + 2 + 1
000231 9614     +ADIW R26 , 4
000232 93ed     +ST X + , R30
000233 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000234 81aa      	LDD  R26,Y+2
000235 81bb      	LDD  R27,Y+2+1
000236 9612      	ADIW R26,2
000237 91ed      	LD   R30,X+
000238 91fd      	LD   R31,X+
000239 9631      	ADIW R30,1
00023a 93fe      	ST   -X,R31
00023b 93ee      	ST   -X,R30
00023c 9731      	SBIW R30,1
00023d 81ac      	LDD  R26,Y+4
00023e 83a0      	STD  Z+0,R26
                 _0x2020013:
00023f 81aa      	LDD  R26,Y+2
000240 81bb      	LDD  R27,Y+2+1
000241 940e 04f8 	CALL __GETW1P
000243 23ff      	TST  R31
000244 f02a      	BRMI _0x2020014
000245 91ed      	LD   R30,X+
000246 91fd      	LD   R31,X+
000247 9631      	ADIW R30,1
000248 93fe      	ST   -X,R31
000249 93ee      	ST   -X,R30
                 _0x2020014:
00024a c006      	RJMP _0x2020015
                 _0x2020010:
00024b 81aa      	LDD  R26,Y+2
00024c 81bb      	LDD  R27,Y+2+1
00024d efef      	LDI  R30,LOW(65535)
00024e efff      	LDI  R31,HIGH(65535)
00024f 93ed      	ST   X+,R30
000250 93fc      	ST   X,R31
                 _0x2020015:
000251 8119      	LDD  R17,Y+1
000252 8108      	LDD  R16,Y+0
000253 9625      	ADIW R28,5
000254 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000255 93ba      	ST   -Y,R27
000256 93aa      	ST   -Y,R26
000257 9726      	SBIW R28,6
000258 940e 0505 	CALL __SAVELOCR6
00025a e010      	LDI  R17,0
00025b 85ac      	LDD  R26,Y+12
00025c 85bd      	LDD  R27,Y+12+1
00025d e0e0      	LDI  R30,LOW(0)
00025e e0f0      	LDI  R31,HIGH(0)
00025f 93ed      	ST   X+,R30
000260 93fc      	ST   X,R31
                 _0x2020016:
000261 89ea      	LDD  R30,Y+18
000262 89fb      	LDD  R31,Y+18+1
000263 9631      	ADIW R30,1
000264 8bea      	STD  Y+18,R30
000265 8bfb      	STD  Y+18+1,R31
000266 9731      	SBIW R30,1
000267 91e4      	LPM  R30,Z
000268 2f2e      	MOV  R18,R30
000269 30e0      	CPI  R30,0
00026a f409      	BRNE PC+2
00026b c115      	RJMP _0x2020018
00026c 2fe1      	MOV  R30,R17
00026d 30e0      	CPI  R30,0
00026e f439      	BRNE _0x202001C
00026f 3225      	CPI  R18,37
000270 f411      	BRNE _0x202001D
000271 e011      	LDI  R17,LOW(1)
000272 c002      	RJMP _0x202001E
                 _0x202001D:
000273 940e 0486 	CALL SUBOPT_0x13
                 _0x202001E:
000275 c10a      	RJMP _0x202001B
                 _0x202001C:
000276 30e1      	CPI  R30,LOW(0x1)
000277 f4a9      	BRNE _0x202001F
000278 3225      	CPI  R18,37
000279 f419      	BRNE _0x2020020
00027a 940e 0486 	CALL SUBOPT_0x13
00027c c102      	RJMP _0x20200CC
                 _0x2020020:
00027d e012      	LDI  R17,LOW(2)
00027e e040      	LDI  R20,LOW(0)
00027f e000      	LDI  R16,LOW(0)
000280 322d      	CPI  R18,45
000281 f411      	BRNE _0x2020021
000282 e001      	LDI  R16,LOW(1)
000283 c0fc      	RJMP _0x202001B
                 _0x2020021:
000284 322b      	CPI  R18,43
000285 f411      	BRNE _0x2020022
000286 e24b      	LDI  R20,LOW(43)
000287 c0f8      	RJMP _0x202001B
                 _0x2020022:
000288 3220      	CPI  R18,32
000289 f411      	BRNE _0x2020023
00028a e240      	LDI  R20,LOW(32)
00028b c0f4      	RJMP _0x202001B
                 _0x2020023:
00028c c002      	RJMP _0x2020024
                 _0x202001F:
00028d 30e2      	CPI  R30,LOW(0x2)
00028e f439      	BRNE _0x2020025
                 _0x2020024:
00028f e050      	LDI  R21,LOW(0)
000290 e013      	LDI  R17,LOW(3)
000291 3320      	CPI  R18,48
000292 f411      	BRNE _0x2020026
000293 6800      	ORI  R16,LOW(128)
000294 c0eb      	RJMP _0x202001B
                 _0x2020026:
000295 c003      	RJMP _0x2020027
                 _0x2020025:
000296 30e3      	CPI  R30,LOW(0x3)
000297 f009      	BREQ PC+2
000298 c0e7      	RJMP _0x202001B
                 _0x2020027:
000299 3320      	CPI  R18,48
00029a f010      	BRLO _0x202002A
00029b 332a      	CPI  R18,58
00029c f008      	BRLO _0x202002B
                 _0x202002A:
00029d c007      	RJMP _0x2020029
                 _0x202002B:
00029e e0aa      	LDI  R26,LOW(10)
00029f 9f5a      	MUL  R21,R26
0002a0 2d50      	MOV  R21,R0
0002a1 2fe2      	MOV  R30,R18
0002a2 53e0      	SUBI R30,LOW(48)
0002a3 0f5e      	ADD  R21,R30
0002a4 c0db      	RJMP _0x202001B
                 _0x2020029:
0002a5 2fe2      	MOV  R30,R18
0002a6 36e3      	CPI  R30,LOW(0x63)
0002a7 f449      	BRNE _0x202002F
0002a8 940e 048d 	CALL SUBOPT_0x14
0002aa 89e8      	LDD  R30,Y+16
0002ab 89f9      	LDD  R31,Y+16+1
0002ac 81a4      	LDD  R26,Z+4
0002ad 93aa      	ST   -Y,R26
0002ae 940e 0493 	CALL SUBOPT_0x15
0002b0 c0ce      	RJMP _0x2020030
                 _0x202002F:
0002b1 37e3      	CPI  R30,LOW(0x73)
0002b2 f441      	BRNE _0x2020032
0002b3 940e 048d 	CALL SUBOPT_0x14
0002b5 940e 0499 	CALL SUBOPT_0x16
0002b7 940e 03bd 	CALL _strlen
0002b9 2f1e      	MOV  R17,R30
0002ba c00a      	RJMP _0x2020033
                 _0x2020032:
0002bb 37e0      	CPI  R30,LOW(0x70)
0002bc f461      	BRNE _0x2020035
0002bd 940e 048d 	CALL SUBOPT_0x14
0002bf 940e 0499 	CALL SUBOPT_0x16
0002c1 940e 03c9 	CALL _strlenf
0002c3 2f1e      	MOV  R17,R30
0002c4 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002c5 6002      	ORI  R16,LOW(2)
0002c6 770f      	ANDI R16,LOW(127)
0002c7 e030      	LDI  R19,LOW(0)
0002c8 c034      	RJMP _0x2020036
                 _0x2020035:
0002c9 36e4      	CPI  R30,LOW(0x64)
0002ca f011      	BREQ _0x2020039
0002cb 36e9      	CPI  R30,LOW(0x69)
0002cc f411      	BRNE _0x202003A
                 _0x2020039:
0002cd 6004      	ORI  R16,LOW(4)
0002ce c002      	RJMP _0x202003B
                 _0x202003A:
0002cf 37e5      	CPI  R30,LOW(0x75)
0002d0 f431      	BRNE _0x202003C
                 _0x202003B:
0002d1 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002d2 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002d3 83ee      	STD  Y+6,R30
0002d4 83ff      	STD  Y+6+1,R31
0002d5 e015      	LDI  R17,LOW(5)
0002d6 c00c      	RJMP _0x202003D
                 _0x202003C:
0002d7 35e8      	CPI  R30,LOW(0x58)
0002d8 f411      	BRNE _0x202003F
0002d9 6008      	ORI  R16,LOW(8)
0002da c003      	RJMP _0x2020040
                 _0x202003F:
0002db 37e8      	CPI  R30,LOW(0x78)
0002dc f009      	BREQ PC+2
0002dd c0a1      	RJMP _0x2020071
                 _0x2020040:
0002de e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002df e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002e0 83ee      	STD  Y+6,R30
0002e1 83ff      	STD  Y+6+1,R31
0002e2 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002e3 ff02      	SBRS R16,2
0002e4 c014      	RJMP _0x2020042
0002e5 940e 048d 	CALL SUBOPT_0x14
0002e7 940e 04a3 	CALL SUBOPT_0x17
0002e9 85ab      	LDD  R26,Y+11
0002ea 23aa      	TST  R26
0002eb f43a      	BRPL _0x2020043
0002ec 85ea      	LDD  R30,Y+10
0002ed 85fb      	LDD  R31,Y+10+1
0002ee 940e 04c0 	CALL __ANEGW1
0002f0 87ea      	STD  Y+10,R30
0002f1 87fb      	STD  Y+10+1,R31
0002f2 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002f3 3040      	CPI  R20,0
0002f4 f011      	BREQ _0x2020044
0002f5 5f1f      	SUBI R17,-LOW(1)
0002f6 c001      	RJMP _0x2020045
                 _0x2020044:
0002f7 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002f8 c004      	RJMP _0x2020046
                 _0x2020042:
0002f9 940e 048d 	CALL SUBOPT_0x14
0002fb 940e 04a3 	CALL SUBOPT_0x17
                 _0x2020046:
                 _0x2020036:
0002fd fd00      	SBRC R16,0
0002fe c011      	RJMP _0x2020047
                 _0x2020048:
0002ff 1715      	CP   R17,R21
000300 f478      	BRSH _0x202004A
000301 ff07      	SBRS R16,7
000302 c008      	RJMP _0x202004B
000303 ff02      	SBRS R16,2
000304 c004      	RJMP _0x202004C
000305 7f0b      	ANDI R16,LOW(251)
000306 2f24      	MOV  R18,R20
000307 5011      	SUBI R17,LOW(1)
000308 c001      	RJMP _0x202004D
                 _0x202004C:
000309 e320      	LDI  R18,LOW(48)
                 _0x202004D:
00030a c001      	RJMP _0x202004E
                 _0x202004B:
00030b e220      	LDI  R18,LOW(32)
                 _0x202004E:
00030c 940e 0486 	CALL SUBOPT_0x13
00030e 5051      	SUBI R21,LOW(1)
00030f cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000310 2f31      	MOV  R19,R17
000311 ff01      	SBRS R16,1
000312 c017      	RJMP _0x202004F
                 _0x2020050:
000313 3030      	CPI  R19,0
000314 f0a1      	BREQ _0x2020052
000315 ff03      	SBRS R16,3
000316 c006      	RJMP _0x2020053
000317 81ee      	LDD  R30,Y+6
000318 81ff      	LDD  R31,Y+6+1
000319 9125      	LPM  R18,Z+
00031a 83ee      	STD  Y+6,R30
00031b 83ff      	STD  Y+6+1,R31
00031c c005      	RJMP _0x2020054
                 _0x2020053:
00031d 81ae      	LDD  R26,Y+6
00031e 81bf      	LDD  R27,Y+6+1
00031f 912d      	LD   R18,X+
000320 83ae      	STD  Y+6,R26
000321 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000322 940e 0486 	CALL SUBOPT_0x13
000324 3050      	CPI  R21,0
000325 f009      	BREQ _0x2020055
000326 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000327 5031      	SUBI R19,LOW(1)
000328 cfea      	RJMP _0x2020050
                 _0x2020052:
000329 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00032a e320      	LDI  R18,LOW(48)
00032b 81ee      	LDD  R30,Y+6
00032c 81ff      	LDD  R31,Y+6+1
00032d 940e 04fc 	CALL __GETW1PF
00032f 87e8      	STD  Y+8,R30
000330 87f9      	STD  Y+8+1,R31
000331 81ee      	LDD  R30,Y+6
000332 81ff      	LDD  R31,Y+6+1
000333 9632      	ADIW R30,2
000334 83ee      	STD  Y+6,R30
000335 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000336 85e8      	LDD  R30,Y+8
000337 85f9      	LDD  R31,Y+8+1
000338 85aa      	LDD  R26,Y+10
000339 85bb      	LDD  R27,Y+10+1
00033a 17ae      	CP   R26,R30
00033b 07bf      	CPC  R27,R31
00033c f050      	BRLO _0x202005C
00033d 5f2f      	SUBI R18,-LOW(1)
00033e 85a8      	LDD  R26,Y+8
00033f 85b9      	LDD  R27,Y+8+1
000340 85ea      	LDD  R30,Y+10
000341 85fb      	LDD  R31,Y+10+1
000342 1bea      	SUB  R30,R26
000343 0bfb      	SBC  R31,R27
000344 87ea      	STD  Y+10,R30
000345 87fb      	STD  Y+10+1,R31
000346 cfef      	RJMP _0x202005A
                 _0x202005C:
000347 332a      	CPI  R18,58
000348 f028      	BRLO _0x202005D
000349 ff03      	SBRS R16,3
00034a c002      	RJMP _0x202005E
00034b 5f29      	SUBI R18,-LOW(7)
00034c c001      	RJMP _0x202005F
                 _0x202005E:
00034d 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00034e fd04      	SBRC R16,4
00034f c01a      	RJMP _0x2020061
000350 3321      	CPI  R18,49
000351 f420      	BRSH _0x2020063
000352 85a8      	LDD  R26,Y+8
000353 85b9      	LDD  R27,Y+8+1
000354 9711      	SBIW R26,1
000355 f409      	BRNE _0x2020062
                 _0x2020063:
000356 c009      	RJMP _0x20200CD
                 _0x2020062:
000357 1753      	CP   R21,R19
000358 f010      	BRLO _0x2020067
000359 ff00      	SBRS R16,0
00035a c001      	RJMP _0x2020068
                 _0x2020067:
00035b c013      	RJMP _0x2020066
                 _0x2020068:
00035c e220      	LDI  R18,LOW(32)
00035d ff07      	SBRS R16,7
00035e c00b      	RJMP _0x2020069
00035f e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000360 6100      	ORI  R16,LOW(16)
000361 ff02      	SBRS R16,2
000362 c007      	RJMP _0x202006A
000363 7f0b      	ANDI R16,LOW(251)
000364 934a      	ST   -Y,R20
000365 940e 0493 	CALL SUBOPT_0x15
000367 3050      	CPI  R21,0
000368 f009      	BREQ _0x202006B
000369 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00036a 940e 0486 	CALL SUBOPT_0x13
00036c 3050      	CPI  R21,0
00036d f009      	BREQ _0x202006C
00036e 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
00036f 5031      	SUBI R19,LOW(1)
000370 85a8      	LDD  R26,Y+8
000371 85b9      	LDD  R27,Y+8+1
000372 9712      	SBIW R26,2
000373 f008      	BRLO _0x2020059
000374 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000375 ff00      	SBRS R16,0
000376 c008      	RJMP _0x202006D
                 _0x202006E:
000377 3050      	CPI  R21,0
000378 f031      	BREQ _0x2020070
000379 5051      	SUBI R21,LOW(1)
00037a e2e0      	LDI  R30,LOW(32)
00037b 93ea      	ST   -Y,R30
00037c 940e 0493 	CALL SUBOPT_0x15
00037e cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00037f e010      	LDI  R17,LOW(0)
                 _0x202001B:
000380 cee0      	RJMP _0x2020016
                 _0x2020018:
000381 85ac      	LDD  R26,Y+12
000382 85bd      	LDD  R27,Y+12+1
000383 940e 04f8 	CALL __GETW1P
000385 940e 050c 	CALL __LOADLOCR6
000387 9664      	ADIW R28,20
000388 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000389 92ff      	PUSH R15
00038a 2ef8      	MOV  R15,R24
00038b 9726      	SBIW R28,6
00038c 940e 0507 	CALL __SAVELOCR4
00038e 940e 04ab 	CALL SUBOPT_0x18
000390 9730      	SBIW R30,0
000391 f419      	BRNE _0x2020072
000392 efef      	LDI  R30,LOW(65535)
000393 efff      	LDI  R31,HIGH(65535)
000394 c023      	RJMP _0x2080001
                 _0x2020072:
000395 01de      	MOVW R26,R28
000396 9616      	ADIW R26,6
000397 940e 04bc 	CALL __ADDW2R15
000399 018d      	MOVW R16,R26
00039a 940e 04ab 	CALL SUBOPT_0x18
00039c 83ee      	STD  Y+6,R30
00039d 83ff      	STD  Y+6+1,R31
00039e e0e0      	LDI  R30,LOW(0)
00039f 87e8      	STD  Y+8,R30
0003a0 87e9      	STD  Y+8+1,R30
0003a1 01de      	MOVW R26,R28
0003a2 961a      	ADIW R26,10
0003a3 940e 04bc 	CALL __ADDW2R15
0003a5 940e 04f8 	CALL __GETW1P
0003a7 93fa      	ST   -Y,R31
0003a8 93ea      	ST   -Y,R30
0003a9 931a      	ST   -Y,R17
0003aa 930a      	ST   -Y,R16
0003ab e1e5      	LDI  R30,LOW(_put_buff_G101)
0003ac e0f2      	LDI  R31,HIGH(_put_buff_G101)
0003ad 93fa      	ST   -Y,R31
0003ae 93ea      	ST   -Y,R30
0003af 01de      	MOVW R26,R28
0003b0 961a      	ADIW R26,10
0003b1 dea3      	RCALL __print_G101
0003b2 019f      	MOVW R18,R30
0003b3 81ae      	LDD  R26,Y+6
0003b4 81bf      	LDD  R27,Y+6+1
0003b5 e0e0      	LDI  R30,LOW(0)
0003b6 93ec      	ST   X,R30
0003b7 01f9      	MOVW R30,R18
                 _0x2080001:
0003b8 940e 050e 	CALL __LOADLOCR4
0003ba 962a      	ADIW R28,10
0003bb 90ff      	POP  R15
0003bc 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003bd 93ba      	ST   -Y,R27
0003be 93aa      	ST   -Y,R26
0003bf 91a9          ld   r26,y+
0003c0 91b9          ld   r27,y+
0003c1 27ee          clr  r30
0003c2 27ff          clr  r31
                 strlen0:
0003c3 916d          ld   r22,x+
0003c4 2366          tst  r22
0003c5 f011          breq strlen1
0003c6 9631          adiw r30,1
0003c7 cffb          rjmp strlen0
                 strlen1:
0003c8 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003c9 93ba      	ST   -Y,R27
0003ca 93aa      	ST   -Y,R26
0003cb 27aa          clr  r26
0003cc 27bb          clr  r27
0003cd 91e9          ld   r30,y+
0003ce 91f9          ld   r31,y+
                 strlenf0:
0003cf 9005      	lpm  r0,z+
0003d0 2000          tst  r0
0003d1 f011          breq strlenf1
0003d2 9611          adiw r26,1
0003d3 cffb          rjmp strlenf0
                 strlenf1:
0003d4 01fd          movw r30,r26
0003d5 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003d6 940e 01a9 	CALL _lcd_gotoxy
0003d8 01fe      	MOVW R30,R28
0003d9 93fa      	ST   -Y,R31
0003da 93ea      	ST   -Y,R30
0003db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1:
0003dc 27ff      	CLR  R31
0003dd 2766      	CLR  R22
0003de 2777      	CLR  R23
0003df 940e 0500 	CALL __PUTPARD1
0003e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0003e2 e08c      	LDI  R24,12
0003e3 940e 0389 	CALL _sprintf
0003e5 9660      	ADIW R28,16
0003e6 01de      	MOVW R26,R28
0003e7 940c 01d7 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0003e9 9721      	SBIW R28,1
0003ea 2fa2      	MOV  R26,R18
0003eb e0b0      	LDI  R27,0
0003ec e0ea      	LDI  R30,LOW(10)
0003ed e0f0      	LDI  R31,HIGH(10)
0003ee 940e 04d7 	CALL __DIVW21
0003f0 83e8      	ST   Y,R30
0003f1 e0f0      	LDI  R31,0
0003f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x4:
0003f3 01df      	MOVW R26,R30
0003f4 e0e3      	LDI  R30,LOW(3)
0003f5 e0f0      	LDI  R31,HIGH(3)
0003f6 940e 04dc 	CALL __MODW21
0003f8 e0aa      	LDI  R26,LOW(10)
0003f9 02ea      	MULS R30,R26
0003fa 2d60      	MOV  R22,R0
0003fb 2fa2      	MOV  R26,R18
0003fc 27bb      	CLR  R27
0003fd e0ea      	LDI  R30,LOW(10)
0003fe e0f0      	LDI  R31,HIGH(10)
0003ff 940e 04dc 	CALL __MODW21
000401 0fe6      	ADD  R30,R22
000402 2f2e      	MOV  R18,R30
000403 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000404 9721      	SBIW R28,1
000405 2fa2      	MOV  R26,R18
000406 27bb      	CLR  R27
000407 e0ea      	LDI  R30,LOW(10)
000408 e0f0      	LDI  R31,HIGH(10)
000409 940e 04dc 	CALL __MODW21
00040b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
00040c 9631      	ADIW R30,1
00040d 01df      	MOVW R26,R30
00040e e0ea      	LDI  R30,LOW(10)
00040f e0f0      	LDI  R31,HIGH(10)
000410 940e 04dc 	CALL __MODW21
000412 83e8      	ST   Y,R30
000413 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x7:
000414 2fa2      	MOV  R26,R18
000415 e0b0      	LDI  R27,0
000416 e0ea      	LDI  R30,LOW(10)
000417 e0f0      	LDI  R31,HIGH(10)
000418 940e 04d7 	CALL __DIVW21
00041a e0aa      	LDI  R26,LOW(10)
00041b 02ea      	MULS R30,R26
00041c 01f0      	MOVW R30,R0
00041d 81a8      	LD   R26,Y
00041e 0fea      	ADD  R30,R26
00041f 2f2e      	MOV  R18,R30
000420 3128      	CPI  R18,24
000421 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
000422 9721      	SBIW R28,1
000423 2fa5      	MOV  R26,R21
000424 e0b0      	LDI  R27,0
000425 e0ea      	LDI  R30,LOW(10)
000426 e0f0      	LDI  R31,HIGH(10)
000427 940e 04d7 	CALL __DIVW21
000429 83e8      	ST   Y,R30
00042a e0f0      	LDI  R31,0
00042b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
00042c 9631      	ADIW R30,1
00042d 01df      	MOVW R26,R30
00042e e0e6      	LDI  R30,LOW(6)
00042f e0f0      	LDI  R31,HIGH(6)
000430 940e 04dc 	CALL __MODW21
000432 e0aa      	LDI  R26,LOW(10)
000433 02ea      	MULS R30,R26
000434 2d60      	MOV  R22,R0
000435 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
000436 2fa5      	MOV  R26,R21
000437 27bb      	CLR  R27
000438 e0ea      	LDI  R30,LOW(10)
000439 e0f0      	LDI  R31,HIGH(10)
00043a 940e 04dc 	CALL __MODW21
00043c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
00043d 2fa5      	MOV  R26,R21
00043e e0b0      	LDI  R27,0
00043f e0ea      	LDI  R30,LOW(10)
000440 e0f0      	LDI  R31,HIGH(10)
000441 940e 04d7 	CALL __DIVW21
000443 e0aa      	LDI  R26,LOW(10)
000444 02ea      	MULS R30,R26
000445 01f0      	MOVW R30,R0
000446 81a8      	LD   R26,Y
000447 0fea      	ADD  R30,R26
000448 2f5e      	MOV  R21,R30
000449 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
00044a 9721      	SBIW R28,1
00044b 2fa4      	MOV  R26,R20
00044c e0b0      	LDI  R27,0
00044d e0ea      	LDI  R30,LOW(10)
00044e e0f0      	LDI  R31,HIGH(10)
00044f 940e 04d7 	CALL __DIVW21
000451 83e8      	ST   Y,R30
000452 e0f0      	LDI  R31,0
000453 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
000454 2fa4      	MOV  R26,R20
000455 27bb      	CLR  R27
000456 e0ea      	LDI  R30,LOW(10)
000457 e0f0      	LDI  R31,HIGH(10)
000458 940e 04dc 	CALL __MODW21
00045a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xE:
00045b 2fa4      	MOV  R26,R20
00045c e0b0      	LDI  R27,0
00045d e0ea      	LDI  R30,LOW(10)
00045e e0f0      	LDI  R31,HIGH(10)
00045f 940e 04d7 	CALL __DIVW21
000461 e0aa      	LDI  R26,LOW(10)
000462 02ea      	MULS R30,R26
000463 01f0      	MOVW R30,R0
000464 81a8      	LD   R26,Y
000465 0fea      	ADD  R30,R26
000466 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xF:
000467 9639      	ADIW R30,9
000468 01df      	MOVW R26,R30
000469 e0ea      	LDI  R30,LOW(10)
00046a e0f0      	LDI  R31,HIGH(10)
00046b 940e 04dc 	CALL __MODW21
00046d 83e8      	ST   Y,R30
00046e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
00046f 9635      	ADIW R30,5
000470 01df      	MOVW R26,R30
000471 e0e6      	LDI  R30,LOW(6)
000472 e0f0      	LDI  R31,HIGH(6)
000473 940e 04dc 	CALL __MODW21
000475 e0aa      	LDI  R26,LOW(10)
000476 02ea      	MULS R30,R26
000477 2d60      	MOV  R22,R0
000478 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000479 940e 019d 	CALL __lcd_write_data
00047b e0a3      	LDI  R26,LOW(3)
00047c e0b0      	LDI  R27,0
00047d 940c 04b2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
00047f e3a0      	LDI  R26,LOW(48)
000480 940e 0189 	CALL __lcd_write_nibble_G100
                +
000482 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000483 958a     +DEC R24
000484 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000485 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x13:
000486 932a      	ST   -Y,R18
000487 85ad      	LDD  R26,Y+13
000488 85be      	LDD  R27,Y+13+1
000489 85ef      	LDD  R30,Y+15
00048a 89f8      	LDD  R31,Y+15+1
00048b 9509      	ICALL
00048c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x14:
00048d 89e8      	LDD  R30,Y+16
00048e 89f9      	LDD  R31,Y+16+1
00048f 9734      	SBIW R30,4
000490 8be8      	STD  Y+16,R30
000491 8bf9      	STD  Y+16+1,R31
000492 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
000493 85ad      	LDD  R26,Y+13
000494 85be      	LDD  R27,Y+13+1
000495 85ef      	LDD  R30,Y+15
000496 89f8      	LDD  R31,Y+15+1
000497 9509      	ICALL
000498 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x16:
000499 89a8      	LDD  R26,Y+16
00049a 89b9      	LDD  R27,Y+16+1
00049b 9614      	ADIW R26,4
00049c 940e 04f8 	CALL __GETW1P
00049e 83ee      	STD  Y+6,R30
00049f 83ff      	STD  Y+6+1,R31
0004a0 81ae      	LDD  R26,Y+6
0004a1 81bf      	LDD  R27,Y+6+1
0004a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x17:
0004a3 89a8      	LDD  R26,Y+16
0004a4 89b9      	LDD  R27,Y+16+1
0004a5 9614      	ADIW R26,4
0004a6 940e 04f8 	CALL __GETW1P
0004a8 87ea      	STD  Y+10,R30
0004a9 87fb      	STD  Y+10+1,R31
0004aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
0004ab 01de      	MOVW R26,R28
0004ac 961c      	ADIW R26,12
0004ad 940e 04bc 	CALL __ADDW2R15
0004af 940e 04f8 	CALL __GETW1P
0004b1 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004b2 9610      	adiw r26,0
0004b3 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004b4 ef8a     +LDI R24 , LOW ( 0xFA )
0004b5 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0004b6 9701     +SBIW R24 , 1
0004b7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0004b8 95a8      	wdr
0004b9 9711      	sbiw r26,1
0004ba f7c9      	brne __delay_ms0
                 __delay_ms1:
0004bb 9508      	ret
                 
                 __ADDW2R15:
0004bc 2400      	CLR  R0
0004bd 0daf      	ADD  R26,R15
0004be 1db0      	ADC  R27,R0
0004bf 9508      	RET
                 
                 __ANEGW1:
0004c0 95f1      	NEG  R31
0004c1 95e1      	NEG  R30
0004c2 40f0      	SBCI R31,0
0004c3 9508      	RET
                 
                 __DIVW21U:
0004c4 2400      	CLR  R0
0004c5 2411      	CLR  R1
0004c6 e190      	LDI  R25,16
                 __DIVW21U1:
0004c7 0faa      	LSL  R26
0004c8 1fbb      	ROL  R27
0004c9 1c00      	ROL  R0
0004ca 1c11      	ROL  R1
0004cb 1a0e      	SUB  R0,R30
0004cc 0a1f      	SBC  R1,R31
0004cd f418      	BRCC __DIVW21U2
0004ce 0e0e      	ADD  R0,R30
0004cf 1e1f      	ADC  R1,R31
0004d0 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004d1 60a1      	SBR  R26,1
                 __DIVW21U3:
0004d2 959a      	DEC  R25
0004d3 f799      	BRNE __DIVW21U1
0004d4 01fd      	MOVW R30,R26
0004d5 01d0      	MOVW R26,R0
0004d6 9508      	RET
                 
                 __DIVW21:
0004d7 d012      	RCALL __CHKSIGNW
0004d8 dfeb      	RCALL __DIVW21U
0004d9 f40e      	BRTC __DIVW211
0004da dfe5      	RCALL __ANEGW1
                 __DIVW211:
0004db 9508      	RET
                 
                 __MODW21:
0004dc 94e8      	CLT
0004dd ffb7      	SBRS R27,7
0004de c004      	RJMP __MODW211
0004df 95a0      	COM  R26
0004e0 95b0      	COM  R27
0004e1 9611      	ADIW R26,1
0004e2 9468      	SET
                 __MODW211:
0004e3 fdf7      	SBRC R31,7
0004e4 dfdb      	RCALL __ANEGW1
0004e5 dfde      	RCALL __DIVW21U
0004e6 01fd      	MOVW R30,R26
0004e7 f40e      	BRTC __MODW212
0004e8 dfd7      	RCALL __ANEGW1
                 __MODW212:
0004e9 9508      	RET
                 
                 __CHKSIGNW:
0004ea 94e8      	CLT
0004eb fff7      	SBRS R31,7
0004ec c002      	RJMP __CHKSW1
0004ed dfd2      	RCALL __ANEGW1
0004ee 9468      	SET
                 __CHKSW1:
0004ef ffb7      	SBRS R27,7
0004f0 c006      	RJMP __CHKSW2
0004f1 95a0      	COM  R26
0004f2 95b0      	COM  R27
0004f3 9611      	ADIW R26,1
0004f4 f800      	BLD  R0,0
0004f5 9403      	INC  R0
0004f6 fa00      	BST  R0,0
                 __CHKSW2:
0004f7 9508      	RET
                 
                 __GETW1P:
0004f8 91ed      	LD   R30,X+
0004f9 91fc      	LD   R31,X
0004fa 9711      	SBIW R26,1
0004fb 9508      	RET
                 
                 __GETW1PF:
0004fc 9005      	LPM  R0,Z+
0004fd 91f4      	LPM  R31,Z
0004fe 2de0      	MOV  R30,R0
0004ff 9508      	RET
                 
                 __PUTPARD1:
000500 937a      	ST   -Y,R23
000501 936a      	ST   -Y,R22
000502 93fa      	ST   -Y,R31
000503 93ea      	ST   -Y,R30
000504 9508      	RET
                 
                 __SAVELOCR6:
000505 935a      	ST   -Y,R21
                 __SAVELOCR5:
000506 934a      	ST   -Y,R20
                 __SAVELOCR4:
000507 933a      	ST   -Y,R19
                 __SAVELOCR3:
000508 932a      	ST   -Y,R18
                 __SAVELOCR2:
000509 931a      	ST   -Y,R17
00050a 930a      	ST   -Y,R16
00050b 9508      	RET
                 
                 __LOADLOCR6:
00050c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00050d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00050e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00050f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000510 8119      	LDD  R17,Y+1
000511 8108      	LD   R16,Y
000512 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  25 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  40 r17:  30 r18:  41 r19:  14 r20:  17 r21:  26 r22:  14 r23:   2 
r24:  23 r25:   5 r26: 173 r27:  55 r28:  29 r29:   1 r30: 241 r31:  83 
x  :  23 y  : 208 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :  12 
adiw  :  36 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  15 
brlt  :   0 brmi  :   1 brne  :  45 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 111 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  16 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   7 cpc   :   2 cpi   :  50 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   3 jmp   :  24 ld    :  28 ldd   :  97 ldi   : 150 
lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  43 movw  :  27 
mul   :   1 muls  :   6 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  10 pop   :   1 push  :   1 rcall :  25 ret   :  44 
reti  :   0 rjmp  :  83 rol   :   3 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   7 sbic  :   3 sbis  :   3 sbiw  :  28 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  69 std   :  40 sts   :   2 sub   :   2 subi  :  22 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a26   2538     60   2598   32768   7.9%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
