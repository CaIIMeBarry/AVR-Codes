;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// No extra functions needed, USART logic can be in main.
;
;void main(void)
; 0000 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0008     // Local variable for the counter, initialized to 0.
; 0000 0009     unsigned char x = 0;
; 0000 000A 
; 0000 000B     // --- Port Initializations ---
; 0000 000C 
; 0000 000D     // PORTA, PORTB, PORTC are not used, leave as default inputs.
; 0000 000E     DDRA = 0x00;
;	x -> R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000F     PORTA = 0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0010     DDRB = 0x00;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0011     PORTB = 0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0012     DDRC = 0x00;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0013     PORTC = 0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0014 
; 0000 0015     // PORTD pins D.2, D.3, and D.4 are inputs for the buttons.
; 0000 0016     // Since you have external pull-ups, we don't need to enable internal ones.
; 0000 0017     DDRD = 0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0018     PORTD = 0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0019 
; 0000 001A     // --- USART Initialization (Transmitter) ---
; 0000 001B     // Baud Rate: 1200 bps (assuming 1MHz internal clock)
; 0000 001C     // 8 data bits, 1 stop bit, no parity.
; 0000 001D     UCSRA = 0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001E     // Enable Transmitter
; 0000 001F     UCSRB = (1<<TXEN);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0020     // Set frame format: 8data, 1stop bit
; 0000 0021     UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0022     // Set baud rate
; 0000 0023     UBRRH = 0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0024     UBRRL = 0x33; // For 1200 baud @ 1MHz clock
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0025 
; 0000 0026     // Main program loop
; 0000 0027     while (1)
;PCODE: $0000002A VOL: 0
; 0000 0028     {
; 0000 0029         // Check for Increment button press on PIND.2
; 0000 002A         if(PIND.2 == 0)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002B         {
; 0000 002C             // Debounce delay
; 0000 002D             delay_ms(50);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 002E             if(x < 15)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002F             {
; 0000 0030                 x++;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0031             }
; 0000 0032             // Wait for button release
; 0000 0033             while(PIND.2 == 0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0034         }
; 0000 0035 
; 0000 0036         // Check for Decrement button press on PIND.3
; 0000 0037         if(PIND.3 == 0)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0038         {
; 0000 0039             // Debounce delay
; 0000 003A             delay_ms(50);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 003B             if(x > 0)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 003C             {
; 0000 003D                 x--;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 003E             }
; 0000 003F             // Wait for button release
; 0000 0040             while(PIND.3 == 0);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0041         }
; 0000 0042 
; 0000 0043         // Check for Send button press on PIND.4
; 0000 0044         if(PIND.4 == 0)
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0045         {
; 0000 0046             // Debounce delay
; 0000 0047             delay_ms(50);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0048 
; 0000 0049             // 1. Wait for the USART Data Register to be empty
; 0000 004A             while (!(UCSRA & (1<<UDRE)));
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004B 
; 0000 004C             // 2. Put data into buffer, sends the data
; 0000 004D             UDR = x;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 004E 
; 0000 004F             // 3. Wait for button release
; 0000 0050             while(PIND.4 == 0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0051         }
; 0000 0052     }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0053 }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
