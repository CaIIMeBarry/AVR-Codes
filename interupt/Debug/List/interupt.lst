
AVRASM ver. 2.1.30  C:\Users\Bardia\Desktop\17mordd\interupt\Debug\List\interupt.asm Fri Aug 08 08:52:42 2025

C:\Users\Bardia\Desktop\17mordd\interupt\Debug\List\interupt.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Bardia\Desktop\17mordd\interupt\Debug\List\interupt.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Bardia\Desktop\17mordd\interupt\Debug\List\interupt.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Bardia\Desktop\17mordd\interupt\Debug\List\interupt.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004b 	JMP  __RESET
000002 940c 0078 	JMP  _ext_int0_isr
000004 940c 007d 	JMP  _ext_int1_isr
000006 940c 0082 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 4e49
000034 3054
000035 3030
000036 0030      	.DB  0x49,0x4E,0x54,0x30,0x30,0x30,0x30,0x0
000037 2020
000038 2020
000039 2020
00003a 0020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0
00003b 4e49
00003c 3054
00003d 3030
00003e 0031      	.DB  0x49,0x4E,0x54,0x30,0x30,0x30,0x31,0x0
00003f 4e49
000040 3054
000041 3030
000042 0032      	.DB  0x49,0x4E,0x54,0x30,0x30,0x30,0x32,0x0
000043 3025
000044 7332
C:\Users\Bardia\Desktop\17mordd\interupt\Debug\List\interupt.asm(1133): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x25,0x30,0x32,0x73,0x0
                 _0x2020003:
000046 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000047 0002      	.DW  0x02
000048 0270      	.DW  __base_y_G101
000049 008c      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00004a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004b 94f8      	CLI
00004c 27ee      	CLR  R30
00004d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004e e0f1      	LDI  R31,1
00004f bffb      	OUT  GICR,R31
000050 bfeb      	OUT  GICR,R30
000051 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000052 e08d      	LDI  R24,(14-2)+1
000053 e0a2      	LDI  R26,2
000054 27bb      	CLR  R27
                 __CLEAR_REG:
000055 93ed      	ST   X+,R30
000056 958a      	DEC  R24
000057 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000058 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000059 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005e e8ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000060 9185      	LPM  R24,Z+
000061 9195      	LPM  R25,Z+
000062 9700      	SBIW R24,0
000063 f061      	BREQ __GLOBAL_INI_END
000064 91a5      	LPM  R26,Z+
000065 91b5      	LPM  R27,Z+
000066 9005      	LPM  R0,Z+
000067 9015      	LPM  R1,Z+
000068 01bf      	MOVW R22,R30
000069 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006a 9005      	LPM  R0,Z+
00006b 920d      	ST   X+,R0
00006c 9701      	SBIW R24,1
00006d f7e1      	BRNE __GLOBAL_INI_LOOP
00006e 01fb      	MOVW R30,R22
00006f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000070 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000071 bfed      	OUT  SPL,R30
000072 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000073 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000074 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000075 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000076 940c 00a3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;unsigned char i;
                 ;char t[16];
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 000D {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000078 940e 0359 	CALL SUBOPT_0x0
                 ; 0000 000E lcd_gotoxy(0,1);
                 ; 0000 000F lcd_putsf("INT0000");
                +
00007a e6a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00007b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
00007c c009      	RJMP _0xA
                 ; 0000 0010 delay_ms(2000);
                 ; 0000 0011 lcd_gotoxy(0,1);
                 ; 0000 0012 lcd_putsf("       ");
                 ; 0000 0013 }
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0017 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00007d 940e 0359 	CALL SUBOPT_0x0
                 ; 0000 0018 lcd_gotoxy(0,1);
                 ; 0000 0019 lcd_putsf("INT0001");
                +
00007f e7a6     +LDI R26 , LOW ( 2 * _0x0 + ( 16 ) )
000080 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW2FN _0x0,16
000081 c004      	RJMP _0xA
                 ; 0000 001A delay_ms(2000);
                 ; 0000 001B lcd_gotoxy(0,1);
                 ; 0000 001C lcd_putsf("       ");
                 ; 0000 001D 
                 ; 0000 001E }
                 ; .FEND
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 0022 {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
000082 940e 0359 	CALL SUBOPT_0x0
                 ; 0000 0023 lcd_gotoxy(0,1);
                 ; 0000 0024 lcd_putsf("INT0002");
                +
000084 e7ae     +LDI R26 , LOW ( 2 * _0x0 + ( 24 ) )
000085 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW2FN _0x0,24
                 _0xA:
000086 940e 0300 	CALL _lcd_putsf
                 ; 0000 0025 delay_ms(2000);
000088 eda0      	LDI  R26,LOW(2000)
000089 e0b7      	LDI  R27,HIGH(2000)
00008a 940e 03a4 	CALL _delay_ms
                 ; 0000 0026 lcd_gotoxy(0,1);
00008c e0e0      	LDI  R30,LOW(0)
00008d 93ea      	ST   -Y,R30
00008e e0a1      	LDI  R26,LOW(1)
00008f 940e 02c3 	CALL _lcd_gotoxy
                 ; 0000 0027 lcd_putsf("       ");
                +
000091 e6ae     +LDI R26 , LOW ( 2 * _0x0 + ( 8 ) )
000092 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW2FN _0x0,8
000093 940e 0300 	CALL _lcd_putsf
                 ; 0000 0028 
                 ; 0000 0029 }
000095 91e9      	LD   R30,Y+
000096 bfef      	OUT  SREG,R30
000097 91f9      	LD   R31,Y+
000098 91e9      	LD   R30,Y+
000099 91b9      	LD   R27,Y+
00009a 91a9      	LD   R26,Y+
00009b 9199      	LD   R25,Y+
00009c 9189      	LD   R24,Y+
00009d 9179      	LD   R23,Y+
00009e 9169      	LD   R22,Y+
00009f 90f9      	LD   R15,Y+
0000a0 9019      	LD   R1,Y+
0000a1 9009      	LD   R0,Y+
0000a2 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 002C {
                 _main:
                 ; .FSTART _main
                 ; 0000 002D // Declare your local variables here
                 ; 0000 002E 
                 ; 0000 002F // Input/Output Ports initialization
                 ; 0000 0030 // Port A initialization
                 ; 0000 0031 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0032 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000a3 e0e0      	LDI  R30,LOW(0)
0000a4 bbea      	OUT  0x1A,R30
                 ; 0000 0033 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0034 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000a5 bbeb      	OUT  0x1B,R30
                 ; 0000 0035 
                 ; 0000 0036 // Port B initialization
                 ; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0038 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000a6 bbe7      	OUT  0x17,R30
                 ; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000a7 bbe8      	OUT  0x18,R30
                 ; 0000 003B 
                 ; 0000 003C // Port C initialization
                 ; 0000 003D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000a8 bbe4      	OUT  0x14,R30
                 ; 0000 003F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0040 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000a9 bbe5      	OUT  0x15,R30
                 ; 0000 0041 
                 ; 0000 0042 // Port D initialization
                 ; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0044 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000aa bbe1      	OUT  0x11,R30
                 ; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0046 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ab bbe2      	OUT  0x12,R30
                 ; 0000 0047 
                 ; 0000 0048 // Timer/Counter 0 initialization
                 ; 0000 0049 // Clock source: System Clock
                 ; 0000 004A // Clock value: Timer 0 Stopped
                 ; 0000 004B // Mode: Normal top=0xFF
                 ; 0000 004C // OC0 output: Disconnected
                 ; 0000 004D TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000ac bfe3      	OUT  0x33,R30
                 ; 0000 004E TCNT0=0x00;
0000ad bfe2      	OUT  0x32,R30
                 ; 0000 004F OCR0=0x00;
0000ae bfec      	OUT  0x3C,R30
                 ; 0000 0050 
                 ; 0000 0051 // Timer/Counter 1 initialization
                 ; 0000 0052 // Clock source: System Clock
                 ; 0000 0053 // Clock value: Timer1 Stopped
                 ; 0000 0054 // Mode: Normal top=0xFFFF
                 ; 0000 0055 // OC1A output: Disconnected
                 ; 0000 0056 // OC1B output: Disconnected
                 ; 0000 0057 // Noise Canceler: Off
                 ; 0000 0058 // Input Capture on Falling Edge
                 ; 0000 0059 // Timer1 Overflow Interrupt: Off
                 ; 0000 005A // Input Capture Interrupt: Off
                 ; 0000 005B // Compare A Match Interrupt: Off
                 ; 0000 005C // Compare B Match Interrupt: Off
                 ; 0000 005D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000af bdef      	OUT  0x2F,R30
                 ; 0000 005E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000b0 bdee      	OUT  0x2E,R30
                 ; 0000 005F TCNT1H=0x00;
0000b1 bded      	OUT  0x2D,R30
                 ; 0000 0060 TCNT1L=0x00;
0000b2 bdec      	OUT  0x2C,R30
                 ; 0000 0061 ICR1H=0x00;
0000b3 bde7      	OUT  0x27,R30
                 ; 0000 0062 ICR1L=0x00;
0000b4 bde6      	OUT  0x26,R30
                 ; 0000 0063 OCR1AH=0x00;
0000b5 bdeb      	OUT  0x2B,R30
                 ; 0000 0064 OCR1AL=0x00;
0000b6 bdea      	OUT  0x2A,R30
                 ; 0000 0065 OCR1BH=0x00;
0000b7 bde9      	OUT  0x29,R30
                 ; 0000 0066 OCR1BL=0x00;
0000b8 bde8      	OUT  0x28,R30
                 ; 0000 0067 
                 ; 0000 0068 // Timer/Counter 2 initialization
                 ; 0000 0069 // Clock source: System Clock
                 ; 0000 006A // Clock value: Timer2 Stopped
                 ; 0000 006B // Mode: Normal top=0xFF
                 ; 0000 006C // OC2 output: Disconnected
                 ; 0000 006D ASSR=0<<AS2;
0000b9 bde2      	OUT  0x22,R30
                 ; 0000 006E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000ba bde5      	OUT  0x25,R30
                 ; 0000 006F TCNT2=0x00;
0000bb bde4      	OUT  0x24,R30
                 ; 0000 0070 OCR2=0x00;
0000bc bde3      	OUT  0x23,R30
                 ; 0000 0071 
                 ; 0000 0072 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0073 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000bd bfe9      	OUT  0x39,R30
                 ; 0000 0074 
                 ; 0000 0075 // External Interrupt(s) initialization
                 ; 0000 0076 // INT0: On
                 ; 0000 0077 // INT0 Mode: Falling Edge
                 ; 0000 0078 // INT1: On
                 ; 0000 0079 // INT1 Mode: Falling Edge
                 ; 0000 007A // INT2: On
                 ; 0000 007B // INT2 Mode: Falling Edge
                 ; 0000 007C GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
0000be b7eb      	IN   R30,0x3B
0000bf 6ee0      	ORI  R30,LOW(0xE0)
0000c0 bfeb      	OUT  0x3B,R30
                 ; 0000 007D MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0000c1 e0ea      	LDI  R30,LOW(10)
0000c2 bfe5      	OUT  0x35,R30
                 ; 0000 007E MCUCSR=(0<<ISC2);
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 bfe4      	OUT  0x34,R30
                 ; 0000 007F GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
0000c5 eee0      	LDI  R30,LOW(224)
0000c6 bfea      	OUT  0x3A,R30
                 ; 0000 0080 
                 ; 0000 0081 // USART initialization
                 ; 0000 0082 // USART disabled
                 ; 0000 0083 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 b9ea      	OUT  0xA,R30
                 ; 0000 0084 
                 ; 0000 0085 // Analog Comparator initialization
                 ; 0000 0086 // Analog Comparator: Off
                 ; 0000 0087 // The Analog Comparator's positive input is
                 ; 0000 0088 // connected to the AIN0 pin
                 ; 0000 0089 // The Analog Comparator's negative input is
                 ; 0000 008A // connected to the AIN1 pin
                 ; 0000 008B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000c9 e8e0      	LDI  R30,LOW(128)
0000ca b9e8      	OUT  0x8,R30
                 ; 0000 008C SFIOR=(0<<ACME);
0000cb e0e0      	LDI  R30,LOW(0)
0000cc bfe0      	OUT  0x30,R30
                 ; 0000 008D 
                 ; 0000 008E // ADC initialization
                 ; 0000 008F // ADC disabled
                 ; 0000 0090 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000cd b9e6      	OUT  0x6,R30
                 ; 0000 0091 
                 ; 0000 0092 // SPI initialization
                 ; 0000 0093 // SPI disabled
                 ; 0000 0094 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000ce b9ed      	OUT  0xD,R30
                 ; 0000 0095 
                 ; 0000 0096 // TWI initialization
                 ; 0000 0097 // TWI disabled
                 ; 0000 0098 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000cf bfe6      	OUT  0x36,R30
                 ; 0000 0099 
                 ; 0000 009A lcd_init(16);
0000d0 e1a0      	LDI  R26,LOW(16)
0000d1 940e 0313 	CALL _lcd_init
                 ; 0000 009B 
                 ; 0000 009C // Global enable interrupts
                 ; 0000 009D #asm("sei")
0000d3 9478      	sei
                 ; 0000 009E 
                 ; 0000 009F while (1)
                 _0x3:
                 ; 0000 00A0       {
                 ; 0000 00A1        for (i=0; i<21; i++)
0000d4 2455      	CLR  R5
                 _0x7:
0000d5 e1e5      	LDI  R30,LOW(21)
0000d6 165e      	CP   R5,R30
0000d7 f508      	BRSH _0x8
                 ; 0000 00A2        {
                 ; 0000 00A3         sprintf (t,"%02s",i);
0000d8 e6e0      	LDI  R30,LOW(_t)
0000d9 e0f2      	LDI  R31,HIGH(_t)
0000da 93fa      	ST   -Y,R31
0000db 93ea      	ST   -Y,R30
                +
0000dc e8e6     +LDI R30 , LOW ( 2 * _0x0 + ( 32 ) )
0000dd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW1FN _0x0,32
0000de 93fa      	ST   -Y,R31
0000df 93ea      	ST   -Y,R30
0000e0 2de5      	MOV  R30,R5
0000e1 27ff      	CLR  R31
0000e2 2766      	CLR  R22
0000e3 2777      	CLR  R23
0000e4 940e 03be 	CALL __PUTPARD1
0000e6 e084      	LDI  R24,4
0000e7 940e 026f 	CALL _sprintf
0000e9 9628      	ADIW R28,8
                 ; 0000 00A4         lcd_gotoxy(7,0);
0000ea e0e7      	LDI  R30,LOW(7)
0000eb 93ea      	ST   -Y,R30
0000ec e0a0      	LDI  R26,LOW(0)
0000ed 940e 02c3 	CALL _lcd_gotoxy
                 ; 0000 00A5         lcd_puts(t);
0000ef e6a0      	LDI  R26,LOW(_t)
0000f0 e0b2      	LDI  R27,HIGH(_t)
0000f1 940e 02f1 	CALL _lcd_puts
                 ; 0000 00A6         delay_ms(100);
0000f3 e6a4      	LDI  R26,LOW(100)
0000f4 e0b0      	LDI  R27,0
0000f5 940e 03a4 	CALL _delay_ms
                 ; 0000 00A7        }
0000f7 9453      	INC  R5
0000f8 cfdc      	RJMP _0x7
                 _0x8:
                 ; 0000 00A8 
                 ; 0000 00A9       }
0000f9 cfda      	RJMP _0x3
                 ; 0000 00AA }
                 _0x9:
0000fa cfff      	RJMP _0x9
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000fb 93ba      	ST   -Y,R27
0000fc 93aa      	ST   -Y,R26
0000fd 931a      	ST   -Y,R17
0000fe 930a      	ST   -Y,R16
0000ff 81aa      	LDD  R26,Y+2
000100 81bb      	LDD  R27,Y+2+1
000101 9612      	ADIW R26,2
000102 940e 03b6 	CALL __GETW1P
000104 9730      	SBIW R30,0
000105 f159      	BREQ _0x2000010
000106 81aa      	LDD  R26,Y+2
000107 81bb      	LDD  R27,Y+2+1
000108 9614      	ADIW R26,4
000109 940e 03b6 	CALL __GETW1P
00010b 018f      	MOVW R16,R30
00010c 9730      	SBIW R30,0
00010d f061      	BREQ _0x2000012
                +
00010e 3002     +CPI R16 , LOW ( 2 )
00010f e0e0     +LDI R30 , HIGH ( 2 )
000110 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000111 f098      	BRLO _0x2000013
000112 01f8      	MOVW R30,R16
000113 9731      	SBIW R30,1
000114 018f      	MOVW R16,R30
                +
000115 81aa     +LDD R26 , Y + 2
000116 81bb     +LDD R27 , Y + 2 + 1
000117 9614     +ADIW R26 , 4
000118 93ed     +ST X + , R30
000119 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00011a 81aa      	LDD  R26,Y+2
00011b 81bb      	LDD  R27,Y+2+1
00011c 9612      	ADIW R26,2
00011d 91ed      	LD   R30,X+
00011e 91fd      	LD   R31,X+
00011f 9631      	ADIW R30,1
000120 93fe      	ST   -X,R31
000121 93ee      	ST   -X,R30
000122 9731      	SBIW R30,1
000123 81ac      	LDD  R26,Y+4
000124 83a0      	STD  Z+0,R26
                 _0x2000013:
000125 81aa      	LDD  R26,Y+2
000126 81bb      	LDD  R27,Y+2+1
000127 940e 03b6 	CALL __GETW1P
000129 23ff      	TST  R31
00012a f02a      	BRMI _0x2000014
00012b 91ed      	LD   R30,X+
00012c 91fd      	LD   R31,X+
00012d 9631      	ADIW R30,1
00012e 93fe      	ST   -X,R31
00012f 93ee      	ST   -X,R30
                 _0x2000014:
000130 c006      	RJMP _0x2000015
                 _0x2000010:
000131 81aa      	LDD  R26,Y+2
000132 81bb      	LDD  R27,Y+2+1
000133 efef      	LDI  R30,LOW(65535)
000134 efff      	LDI  R31,HIGH(65535)
000135 93ed      	ST   X+,R30
000136 93fc      	ST   X,R31
                 _0x2000015:
000137 8119      	LDD  R17,Y+1
000138 8108      	LDD  R16,Y+0
000139 9625      	ADIW R28,5
00013a 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00013b 93ba      	ST   -Y,R27
00013c 93aa      	ST   -Y,R26
00013d 9726      	SBIW R28,6
00013e 940e 03c3 	CALL __SAVELOCR6
000140 e010      	LDI  R17,0
000141 85ac      	LDD  R26,Y+12
000142 85bd      	LDD  R27,Y+12+1
000143 e0e0      	LDI  R30,LOW(0)
000144 e0f0      	LDI  R31,HIGH(0)
000145 93ed      	ST   X+,R30
000146 93fc      	ST   X,R31
                 _0x2000016:
000147 89ea      	LDD  R30,Y+18
000148 89fb      	LDD  R31,Y+18+1
000149 9631      	ADIW R30,1
00014a 8bea      	STD  Y+18,R30
00014b 8bfb      	STD  Y+18+1,R31
00014c 9731      	SBIW R30,1
00014d 91e4      	LPM  R30,Z
00014e 2f2e      	MOV  R18,R30
00014f 30e0      	CPI  R30,0
000150 f409      	BRNE PC+2
000151 c115      	RJMP _0x2000018
000152 2fe1      	MOV  R30,R17
000153 30e0      	CPI  R30,0
000154 f439      	BRNE _0x200001C
000155 3225      	CPI  R18,37
000156 f411      	BRNE _0x200001D
000157 e011      	LDI  R17,LOW(1)
000158 c002      	RJMP _0x200001E
                 _0x200001D:
000159 940e 036b 	CALL SUBOPT_0x1
                 _0x200001E:
00015b c10a      	RJMP _0x200001B
                 _0x200001C:
00015c 30e1      	CPI  R30,LOW(0x1)
00015d f4a9      	BRNE _0x200001F
00015e 3225      	CPI  R18,37
00015f f419      	BRNE _0x2000020
000160 940e 036b 	CALL SUBOPT_0x1
000162 c102      	RJMP _0x20000CC
                 _0x2000020:
000163 e012      	LDI  R17,LOW(2)
000164 e040      	LDI  R20,LOW(0)
000165 e000      	LDI  R16,LOW(0)
000166 322d      	CPI  R18,45
000167 f411      	BRNE _0x2000021
000168 e001      	LDI  R16,LOW(1)
000169 c0fc      	RJMP _0x200001B
                 _0x2000021:
00016a 322b      	CPI  R18,43
00016b f411      	BRNE _0x2000022
00016c e24b      	LDI  R20,LOW(43)
00016d c0f8      	RJMP _0x200001B
                 _0x2000022:
00016e 3220      	CPI  R18,32
00016f f411      	BRNE _0x2000023
000170 e240      	LDI  R20,LOW(32)
000171 c0f4      	RJMP _0x200001B
                 _0x2000023:
000172 c002      	RJMP _0x2000024
                 _0x200001F:
000173 30e2      	CPI  R30,LOW(0x2)
000174 f439      	BRNE _0x2000025
                 _0x2000024:
000175 e050      	LDI  R21,LOW(0)
000176 e013      	LDI  R17,LOW(3)
000177 3320      	CPI  R18,48
000178 f411      	BRNE _0x2000026
000179 6800      	ORI  R16,LOW(128)
00017a c0eb      	RJMP _0x200001B
                 _0x2000026:
00017b c003      	RJMP _0x2000027
                 _0x2000025:
00017c 30e3      	CPI  R30,LOW(0x3)
00017d f009      	BREQ PC+2
00017e c0e7      	RJMP _0x200001B
                 _0x2000027:
00017f 3320      	CPI  R18,48
000180 f010      	BRLO _0x200002A
000181 332a      	CPI  R18,58
000182 f008      	BRLO _0x200002B
                 _0x200002A:
000183 c007      	RJMP _0x2000029
                 _0x200002B:
000184 e0aa      	LDI  R26,LOW(10)
000185 9f5a      	MUL  R21,R26
000186 2d50      	MOV  R21,R0
000187 2fe2      	MOV  R30,R18
000188 53e0      	SUBI R30,LOW(48)
000189 0f5e      	ADD  R21,R30
00018a c0db      	RJMP _0x200001B
                 _0x2000029:
00018b 2fe2      	MOV  R30,R18
00018c 36e3      	CPI  R30,LOW(0x63)
00018d f449      	BRNE _0x200002F
00018e 940e 0372 	CALL SUBOPT_0x2
000190 89e8      	LDD  R30,Y+16
000191 89f9      	LDD  R31,Y+16+1
000192 81a4      	LDD  R26,Z+4
000193 93aa      	ST   -Y,R26
000194 940e 0378 	CALL SUBOPT_0x3
000196 c0ce      	RJMP _0x2000030
                 _0x200002F:
000197 37e3      	CPI  R30,LOW(0x73)
000198 f441      	BRNE _0x2000032
000199 940e 0372 	CALL SUBOPT_0x2
00019b 940e 037e 	CALL SUBOPT_0x4
00019d 940e 0340 	CALL _strlen
00019f 2f1e      	MOV  R17,R30
0001a0 c00a      	RJMP _0x2000033
                 _0x2000032:
0001a1 37e0      	CPI  R30,LOW(0x70)
0001a2 f461      	BRNE _0x2000035
0001a3 940e 0372 	CALL SUBOPT_0x2
0001a5 940e 037e 	CALL SUBOPT_0x4
0001a7 940e 034c 	CALL _strlenf
0001a9 2f1e      	MOV  R17,R30
0001aa 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001ab 6002      	ORI  R16,LOW(2)
0001ac 770f      	ANDI R16,LOW(127)
0001ad e030      	LDI  R19,LOW(0)
0001ae c034      	RJMP _0x2000036
                 _0x2000035:
0001af 36e4      	CPI  R30,LOW(0x64)
0001b0 f011      	BREQ _0x2000039
0001b1 36e9      	CPI  R30,LOW(0x69)
0001b2 f411      	BRNE _0x200003A
                 _0x2000039:
0001b3 6004      	ORI  R16,LOW(4)
0001b4 c002      	RJMP _0x200003B
                 _0x200003A:
0001b5 37e5      	CPI  R30,LOW(0x75)
0001b6 f431      	BRNE _0x200003C
                 _0x200003B:
0001b7 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001b8 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001b9 83ee      	STD  Y+6,R30
0001ba 83ff      	STD  Y+6+1,R31
0001bb e015      	LDI  R17,LOW(5)
0001bc c00c      	RJMP _0x200003D
                 _0x200003C:
0001bd 35e8      	CPI  R30,LOW(0x58)
0001be f411      	BRNE _0x200003F
0001bf 6008      	ORI  R16,LOW(8)
0001c0 c003      	RJMP _0x2000040
                 _0x200003F:
0001c1 37e8      	CPI  R30,LOW(0x78)
0001c2 f009      	BREQ PC+2
0001c3 c0a1      	RJMP _0x2000071
                 _0x2000040:
0001c4 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001c5 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001c6 83ee      	STD  Y+6,R30
0001c7 83ff      	STD  Y+6+1,R31
0001c8 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001c9 ff02      	SBRS R16,2
0001ca c014      	RJMP _0x2000042
0001cb 940e 0372 	CALL SUBOPT_0x2
0001cd 940e 0388 	CALL SUBOPT_0x5
0001cf 85ab      	LDD  R26,Y+11
0001d0 23aa      	TST  R26
0001d1 f43a      	BRPL _0x2000043
0001d2 85ea      	LDD  R30,Y+10
0001d3 85fb      	LDD  R31,Y+10+1
0001d4 940e 03b2 	CALL __ANEGW1
0001d6 87ea      	STD  Y+10,R30
0001d7 87fb      	STD  Y+10+1,R31
0001d8 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001d9 3040      	CPI  R20,0
0001da f011      	BREQ _0x2000044
0001db 5f1f      	SUBI R17,-LOW(1)
0001dc c001      	RJMP _0x2000045
                 _0x2000044:
0001dd 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001de c004      	RJMP _0x2000046
                 _0x2000042:
0001df 940e 0372 	CALL SUBOPT_0x2
0001e1 940e 0388 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
0001e3 fd00      	SBRC R16,0
0001e4 c011      	RJMP _0x2000047
                 _0x2000048:
0001e5 1715      	CP   R17,R21
0001e6 f478      	BRSH _0x200004A
0001e7 ff07      	SBRS R16,7
0001e8 c008      	RJMP _0x200004B
0001e9 ff02      	SBRS R16,2
0001ea c004      	RJMP _0x200004C
0001eb 7f0b      	ANDI R16,LOW(251)
0001ec 2f24      	MOV  R18,R20
0001ed 5011      	SUBI R17,LOW(1)
0001ee c001      	RJMP _0x200004D
                 _0x200004C:
0001ef e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001f0 c001      	RJMP _0x200004E
                 _0x200004B:
0001f1 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001f2 940e 036b 	CALL SUBOPT_0x1
0001f4 5051      	SUBI R21,LOW(1)
0001f5 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001f6 2f31      	MOV  R19,R17
0001f7 ff01      	SBRS R16,1
0001f8 c017      	RJMP _0x200004F
                 _0x2000050:
0001f9 3030      	CPI  R19,0
0001fa f0a1      	BREQ _0x2000052
0001fb ff03      	SBRS R16,3
0001fc c006      	RJMP _0x2000053
0001fd 81ee      	LDD  R30,Y+6
0001fe 81ff      	LDD  R31,Y+6+1
0001ff 9125      	LPM  R18,Z+
000200 83ee      	STD  Y+6,R30
000201 83ff      	STD  Y+6+1,R31
000202 c005      	RJMP _0x2000054
                 _0x2000053:
000203 81ae      	LDD  R26,Y+6
000204 81bf      	LDD  R27,Y+6+1
000205 912d      	LD   R18,X+
000206 83ae      	STD  Y+6,R26
000207 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000208 940e 036b 	CALL SUBOPT_0x1
00020a 3050      	CPI  R21,0
00020b f009      	BREQ _0x2000055
00020c 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00020d 5031      	SUBI R19,LOW(1)
00020e cfea      	RJMP _0x2000050
                 _0x2000052:
00020f c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000210 e320      	LDI  R18,LOW(48)
000211 81ee      	LDD  R30,Y+6
000212 81ff      	LDD  R31,Y+6+1
000213 940e 03ba 	CALL __GETW1PF
000215 87e8      	STD  Y+8,R30
000216 87f9      	STD  Y+8+1,R31
000217 81ee      	LDD  R30,Y+6
000218 81ff      	LDD  R31,Y+6+1
000219 9632      	ADIW R30,2
00021a 83ee      	STD  Y+6,R30
00021b 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00021c 85e8      	LDD  R30,Y+8
00021d 85f9      	LDD  R31,Y+8+1
00021e 85aa      	LDD  R26,Y+10
00021f 85bb      	LDD  R27,Y+10+1
000220 17ae      	CP   R26,R30
000221 07bf      	CPC  R27,R31
000222 f050      	BRLO _0x200005C
000223 5f2f      	SUBI R18,-LOW(1)
000224 85a8      	LDD  R26,Y+8
000225 85b9      	LDD  R27,Y+8+1
000226 85ea      	LDD  R30,Y+10
000227 85fb      	LDD  R31,Y+10+1
000228 1bea      	SUB  R30,R26
000229 0bfb      	SBC  R31,R27
00022a 87ea      	STD  Y+10,R30
00022b 87fb      	STD  Y+10+1,R31
00022c cfef      	RJMP _0x200005A
                 _0x200005C:
00022d 332a      	CPI  R18,58
00022e f028      	BRLO _0x200005D
00022f ff03      	SBRS R16,3
000230 c002      	RJMP _0x200005E
000231 5f29      	SUBI R18,-LOW(7)
000232 c001      	RJMP _0x200005F
                 _0x200005E:
000233 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000234 fd04      	SBRC R16,4
000235 c01a      	RJMP _0x2000061
000236 3321      	CPI  R18,49
000237 f420      	BRSH _0x2000063
000238 85a8      	LDD  R26,Y+8
000239 85b9      	LDD  R27,Y+8+1
00023a 9711      	SBIW R26,1
00023b f409      	BRNE _0x2000062
                 _0x2000063:
00023c c009      	RJMP _0x20000CD
                 _0x2000062:
00023d 1753      	CP   R21,R19
00023e f010      	BRLO _0x2000067
00023f ff00      	SBRS R16,0
000240 c001      	RJMP _0x2000068
                 _0x2000067:
000241 c013      	RJMP _0x2000066
                 _0x2000068:
000242 e220      	LDI  R18,LOW(32)
000243 ff07      	SBRS R16,7
000244 c00b      	RJMP _0x2000069
000245 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000246 6100      	ORI  R16,LOW(16)
000247 ff02      	SBRS R16,2
000248 c007      	RJMP _0x200006A
000249 7f0b      	ANDI R16,LOW(251)
00024a 934a      	ST   -Y,R20
00024b 940e 0378 	CALL SUBOPT_0x3
00024d 3050      	CPI  R21,0
00024e f009      	BREQ _0x200006B
00024f 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000250 940e 036b 	CALL SUBOPT_0x1
000252 3050      	CPI  R21,0
000253 f009      	BREQ _0x200006C
000254 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000255 5031      	SUBI R19,LOW(1)
000256 85a8      	LDD  R26,Y+8
000257 85b9      	LDD  R27,Y+8+1
000258 9712      	SBIW R26,2
000259 f008      	BRLO _0x2000059
00025a cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00025b ff00      	SBRS R16,0
00025c c008      	RJMP _0x200006D
                 _0x200006E:
00025d 3050      	CPI  R21,0
00025e f031      	BREQ _0x2000070
00025f 5051      	SUBI R21,LOW(1)
000260 e2e0      	LDI  R30,LOW(32)
000261 93ea      	ST   -Y,R30
000262 940e 0378 	CALL SUBOPT_0x3
000264 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000265 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000266 cee0      	RJMP _0x2000016
                 _0x2000018:
000267 85ac      	LDD  R26,Y+12
000268 85bd      	LDD  R27,Y+12+1
000269 940e 03b6 	CALL __GETW1P
00026b 940e 03ca 	CALL __LOADLOCR6
00026d 9664      	ADIW R28,20
00026e 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00026f 92ff      	PUSH R15
000270 2ef8      	MOV  R15,R24
000271 9726      	SBIW R28,6
000272 940e 03c5 	CALL __SAVELOCR4
000274 940e 0390 	CALL SUBOPT_0x6
000276 9730      	SBIW R30,0
000277 f419      	BRNE _0x2000072
000278 efef      	LDI  R30,LOW(65535)
000279 efff      	LDI  R31,HIGH(65535)
00027a c023      	RJMP _0x2080003
                 _0x2000072:
00027b 01de      	MOVW R26,R28
00027c 9616      	ADIW R26,6
00027d 940e 03ae 	CALL __ADDW2R15
00027f 018d      	MOVW R16,R26
000280 940e 0390 	CALL SUBOPT_0x6
000282 83ee      	STD  Y+6,R30
000283 83ff      	STD  Y+6+1,R31
000284 e0e0      	LDI  R30,LOW(0)
000285 87e8      	STD  Y+8,R30
000286 87e9      	STD  Y+8+1,R30
000287 01de      	MOVW R26,R28
000288 961a      	ADIW R26,10
000289 940e 03ae 	CALL __ADDW2R15
00028b 940e 03b6 	CALL __GETW1P
00028d 93fa      	ST   -Y,R31
00028e 93ea      	ST   -Y,R30
00028f 931a      	ST   -Y,R17
000290 930a      	ST   -Y,R16
000291 efeb      	LDI  R30,LOW(_put_buff_G100)
000292 e0f0      	LDI  R31,HIGH(_put_buff_G100)
000293 93fa      	ST   -Y,R31
000294 93ea      	ST   -Y,R30
000295 01de      	MOVW R26,R28
000296 961a      	ADIW R26,10
000297 dea3      	RCALL __print_G100
000298 019f      	MOVW R18,R30
000299 81ae      	LDD  R26,Y+6
00029a 81bf      	LDD  R27,Y+6+1
00029b e0e0      	LDI  R30,LOW(0)
00029c 93ec      	ST   X,R30
00029d 01f9      	MOVW R30,R18
                 _0x2080003:
00029e 940e 03cc 	CALL __LOADLOCR4
0002a0 962a      	ADIW R28,10
0002a1 90ff      	POP  R15
0002a2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002a3 93aa      	ST   -Y,R26
0002a4 b3eb      	IN   R30,0x1B
0002a5 70ef      	ANDI R30,LOW(0xF)
0002a6 2fae      	MOV  R26,R30
0002a7 81e8      	LD   R30,Y
0002a8 7fe0      	ANDI R30,LOW(0xF0)
0002a9 2bea      	OR   R30,R26
0002aa bbeb      	OUT  0x1B,R30
                +
0002ab e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002ac 958a     +DEC R24
0002ad f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002ae 9ada      	SBI  0x1B,2
                +
0002af e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002b0 958a     +DEC R24
0002b1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002b2 98da      	CBI  0x1B,2
                +
0002b3 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002b4 958a     +DEC R24
0002b5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002b6 c087      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002b7 93aa      	ST   -Y,R26
0002b8 81a8      	LD   R26,Y
0002b9 dfe9      	RCALL __lcd_write_nibble_G101
0002ba 81e8          ld    r30,y
0002bb 95e2          swap  r30
0002bc 83e8          st    y,r30
0002bd 81a8      	LD   R26,Y
0002be dfe4      	RCALL __lcd_write_nibble_G101
                +
0002bf e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0002c0 958a     +DEC R24
0002c1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0002c2 c07b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002c3 93aa      	ST   -Y,R26
0002c4 81e8      	LD   R30,Y
0002c5 e0f0      	LDI  R31,0
0002c6 59e0      	SUBI R30,LOW(-__base_y_G101)
0002c7 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0002c8 81e0      	LD   R30,Z
0002c9 81a9      	LDD  R26,Y+1
0002ca 0fae      	ADD  R26,R30
0002cb dfeb      	RCALL __lcd_write_data
0002cc 8049      	LDD  R4,Y+1
0002cd 8078      	LDD  R7,Y+0
0002ce 9622      	ADIW R28,2
0002cf 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002d0 e0a2      	LDI  R26,LOW(2)
0002d1 940e 0397 	CALL SUBOPT_0x7
0002d3 e0ac      	LDI  R26,LOW(12)
0002d4 dfe2      	RCALL __lcd_write_data
0002d5 e0a1      	LDI  R26,LOW(1)
0002d6 940e 0397 	CALL SUBOPT_0x7
0002d8 e0e0      	LDI  R30,LOW(0)
0002d9 2e7e      	MOV  R7,R30
0002da 2e4e      	MOV  R4,R30
0002db 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002dc 93aa      	ST   -Y,R26
0002dd 81a8      	LD   R26,Y
0002de 30aa      	CPI  R26,LOW(0xA)
0002df f011      	BREQ _0x2020005
0002e0 1446      	CP   R4,R6
0002e1 f048      	BRLO _0x2020004
                 _0x2020005:
0002e2 e0e0      	LDI  R30,LOW(0)
0002e3 93ea      	ST   -Y,R30
0002e4 9473      	INC  R7
0002e5 2da7      	MOV  R26,R7
0002e6 dfdc      	RCALL _lcd_gotoxy
0002e7 81a8      	LD   R26,Y
0002e8 30aa      	CPI  R26,LOW(0xA)
0002e9 f409      	BRNE _0x2020007
0002ea c053      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0002eb 9443      	INC  R4
0002ec 9ad8      	SBI  0x1B,0
0002ed 81a8      	LD   R26,Y
0002ee dfc8      	RCALL __lcd_write_data
0002ef 98d8      	CBI  0x1B,0
0002f0 c04d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002f1 93ba      	ST   -Y,R27
0002f2 93aa      	ST   -Y,R26
0002f3 931a      	ST   -Y,R17
                 _0x2020008:
0002f4 81a9      	LDD  R26,Y+1
0002f5 81ba      	LDD  R27,Y+1+1
0002f6 91ed      	LD   R30,X+
0002f7 83a9      	STD  Y+1,R26
0002f8 83ba      	STD  Y+1+1,R27
0002f9 2f1e      	MOV  R17,R30
0002fa 30e0      	CPI  R30,0
0002fb f019      	BREQ _0x202000A
0002fc 2fa1      	MOV  R26,R17
0002fd dfde      	RCALL _lcd_putchar
0002fe cff5      	RJMP _0x2020008
                 _0x202000A:
0002ff c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000300 93ba      	ST   -Y,R27
000301 93aa      	ST   -Y,R26
000302 931a      	ST   -Y,R17
                 _0x202000B:
000303 81e9      	LDD  R30,Y+1
000304 81fa      	LDD  R31,Y+1+1
000305 9631      	ADIW R30,1
000306 83e9      	STD  Y+1,R30
000307 83fa      	STD  Y+1+1,R31
000308 9731      	SBIW R30,1
000309 91e4      	LPM  R30,Z
00030a 2f1e      	MOV  R17,R30
00030b 30e0      	CPI  R30,0
00030c f019      	BREQ _0x202000D
00030d 2fa1      	MOV  R26,R17
00030e dfcd      	RCALL _lcd_putchar
00030f cff3      	RJMP _0x202000B
                 _0x202000D:
                 _0x2080002:
000310 8118      	LDD  R17,Y+0
000311 9623      	ADIW R28,3
000312 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000313 93aa      	ST   -Y,R26
000314 b3ea      	IN   R30,0x1A
000315 6fe0      	ORI  R30,LOW(0xF0)
000316 bbea      	OUT  0x1A,R30
000317 9ad2      	SBI  0x1A,2
000318 9ad0      	SBI  0x1A,0
000319 9ad1      	SBI  0x1A,1
00031a 98da      	CBI  0x1B,2
00031b 98d8      	CBI  0x1B,0
00031c 98d9      	CBI  0x1B,1
00031d 8068      	LDD  R6,Y+0
00031e 81e8      	LD   R30,Y
00031f 58e0      	SUBI R30,-LOW(128)
                +
000320 93e0 0272+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000322 81e8      	LD   R30,Y
000323 54e0      	SUBI R30,-LOW(192)
                +
000324 93e0 0273+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000326 e1a4      	LDI  R26,LOW(20)
000327 e0b0      	LDI  R27,0
000328 940e 03a4 	CALL _delay_ms
00032a 940e 039d 	CALL SUBOPT_0x8
00032c 940e 039d 	CALL SUBOPT_0x8
00032e 940e 039d 	CALL SUBOPT_0x8
000330 e2a0      	LDI  R26,LOW(32)
000331 df71      	RCALL __lcd_write_nibble_G101
                +
000332 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000333 958a     +DEC R24
000334 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000335 e2a8      	LDI  R26,LOW(40)
000336 df80      	RCALL __lcd_write_data
000337 e0a4      	LDI  R26,LOW(4)
000338 df7e      	RCALL __lcd_write_data
000339 e8a5      	LDI  R26,LOW(133)
00033a df7c      	RCALL __lcd_write_data
00033b e0a6      	LDI  R26,LOW(6)
00033c df7a      	RCALL __lcd_write_data
00033d df92      	RCALL _lcd_clear
                 _0x2080001:
00033e 9621      	ADIW R28,1
00033f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000340 93ba      	ST   -Y,R27
000341 93aa      	ST   -Y,R26
000342 91a9          ld   r26,y+
000343 91b9          ld   r27,y+
000344 27ee          clr  r30
000345 27ff          clr  r31
                 strlen0:
000346 916d          ld   r22,x+
000347 2366          tst  r22
000348 f011          breq strlen1
000349 9631          adiw r30,1
00034a cffb          rjmp strlen0
                 strlen1:
00034b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00034c 93ba      	ST   -Y,R27
00034d 93aa      	ST   -Y,R26
00034e 27aa          clr  r26
00034f 27bb          clr  r27
000350 91e9          ld   r30,y+
000351 91f9          ld   r31,y+
                 strlenf0:
000352 9005      	lpm  r0,z+
000353 2000          tst  r0
000354 f011          breq strlenf1
000355 9611          adiw r26,1
000356 cffb          rjmp strlenf0
                 strlenf1:
000357 01fd          movw r30,r26
000358 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _t:
000260           	.BYTE 0x10
                 __base_y_G101:
000270           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x0:
000359 920a      	ST   -Y,R0
00035a 921a      	ST   -Y,R1
00035b 92fa      	ST   -Y,R15
00035c 936a      	ST   -Y,R22
00035d 937a      	ST   -Y,R23
00035e 938a      	ST   -Y,R24
00035f 939a      	ST   -Y,R25
000360 93aa      	ST   -Y,R26
000361 93ba      	ST   -Y,R27
000362 93ea      	ST   -Y,R30
000363 93fa      	ST   -Y,R31
000364 b7ef      	IN   R30,SREG
000365 93ea      	ST   -Y,R30
000366 e0e0      	LDI  R30,LOW(0)
000367 93ea      	ST   -Y,R30
000368 e0a1      	LDI  R26,LOW(1)
000369 940c 02c3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
00036b 932a      	ST   -Y,R18
00036c 85ad      	LDD  R26,Y+13
00036d 85be      	LDD  R27,Y+13+1
00036e 85ef      	LDD  R30,Y+15
00036f 89f8      	LDD  R31,Y+15+1
000370 9509      	ICALL
000371 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000372 89e8      	LDD  R30,Y+16
000373 89f9      	LDD  R31,Y+16+1
000374 9734      	SBIW R30,4
000375 8be8      	STD  Y+16,R30
000376 8bf9      	STD  Y+16+1,R31
000377 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000378 85ad      	LDD  R26,Y+13
000379 85be      	LDD  R27,Y+13+1
00037a 85ef      	LDD  R30,Y+15
00037b 89f8      	LDD  R31,Y+15+1
00037c 9509      	ICALL
00037d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
00037e 89a8      	LDD  R26,Y+16
00037f 89b9      	LDD  R27,Y+16+1
000380 9614      	ADIW R26,4
000381 940e 03b6 	CALL __GETW1P
000383 83ee      	STD  Y+6,R30
000384 83ff      	STD  Y+6+1,R31
000385 81ae      	LDD  R26,Y+6
000386 81bf      	LDD  R27,Y+6+1
000387 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000388 89a8      	LDD  R26,Y+16
000389 89b9      	LDD  R27,Y+16+1
00038a 9614      	ADIW R26,4
00038b 940e 03b6 	CALL __GETW1P
00038d 87ea      	STD  Y+10,R30
00038e 87fb      	STD  Y+10+1,R31
00038f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000390 01de      	MOVW R26,R28
000391 961c      	ADIW R26,12
000392 940e 03ae 	CALL __ADDW2R15
000394 940e 03b6 	CALL __GETW1P
000396 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000397 940e 02b7 	CALL __lcd_write_data
000399 e0a3      	LDI  R26,LOW(3)
00039a e0b0      	LDI  R27,0
00039b 940c 03a4 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
00039d e3a0      	LDI  R26,LOW(48)
00039e 940e 02a3 	CALL __lcd_write_nibble_G101
                +
0003a0 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0003a1 958a     +DEC R24
0003a2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0003a3 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003a4 9610      	adiw r26,0
0003a5 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003a6 ef8a     +LDI R24 , LOW ( 0xFA )
0003a7 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0003a8 9701     +SBIW R24 , 1
0003a9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0003aa 95a8      	wdr
0003ab 9711      	sbiw r26,1
0003ac f7c9      	brne __delay_ms0
                 __delay_ms1:
0003ad 9508      	ret
                 
                 __ADDW2R15:
0003ae 2400      	CLR  R0
0003af 0daf      	ADD  R26,R15
0003b0 1db0      	ADC  R27,R0
0003b1 9508      	RET
                 
                 __ANEGW1:
0003b2 95f1      	NEG  R31
0003b3 95e1      	NEG  R30
0003b4 40f0      	SBCI R31,0
0003b5 9508      	RET
                 
                 __GETW1P:
0003b6 91ed      	LD   R30,X+
0003b7 91fc      	LD   R31,X
0003b8 9711      	SBIW R26,1
0003b9 9508      	RET
                 
                 __GETW1PF:
0003ba 9005      	LPM  R0,Z+
0003bb 91f4      	LPM  R31,Z
0003bc 2de0      	MOV  R30,R0
0003bd 9508      	RET
                 
                 __PUTPARD1:
0003be 937a      	ST   -Y,R23
0003bf 936a      	ST   -Y,R22
0003c0 93fa      	ST   -Y,R31
0003c1 93ea      	ST   -Y,R30
0003c2 9508      	RET
                 
                 __SAVELOCR6:
0003c3 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003c4 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003c5 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003c6 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003c7 931a      	ST   -Y,R17
0003c8 930a      	ST   -Y,R16
0003c9 9508      	RET
                 
                 __LOADLOCR6:
0003ca 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003cb 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003cc 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003cd 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003ce 8119      	LDD  R17,Y+1
0003cf 8108      	LD   R16,Y
0003d0 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  13 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  34 r17:  27 r18:  29 r19:   8 r20:   9 r21:  17 r22:   8 r23:   4 
r24:  25 r25:   5 r26: 109 r27:  46 r28:  14 r29:   1 r30: 211 r31:  62 
x  :  23 y  : 199 z  :  16 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  30 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  59 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   2 cpi   :  34 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   3 jmp   :  24 ld    :  37 ldd   :  79 ldi   : 107 
lds   :   0 lpm   :  16 lsl   :   0 lsr   :   0 mov   :  20 movw  :  14 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  45 pop   :   1 push  :   1 rcall :  15 ret   :  24 
reti  :   1 rjmp  :  64 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  18 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  76 std   :  33 sts   :   2 sub   :   1 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007a2   1888     66   1954   32768   6.0%
[.dseg] 0x000060 0x000274      0     20     20    2048   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
